import './_.html';
import { Template } from 'meteor/templating';
import { ReactiveDict } from 'meteor/reactive-dict';
import { ReactiveVar } from 'meteor/reactive-var';
// import * as Plot from '@observablehq/plot';

import {
    MeasureType,
    ParticipationSlotStatus
} from "../../../../../../imports/api/ga-models/constants";
import {
    ExperimentStatus
} from "../../../../../../imports/api/ga-models/constants";
import {
    TimeSpan,
    Time
} from "../../../../../../imports/api/ga-models/time";

const treeData = {
    name: "Root",
    children: [
        {
            name: "Child 1",
            children: [
                { name: "Grandchild 1" },
                { name: "Grandchild 2" },
            ],
        },
        {
            name: "Child 2",
            children: [
                { name: "Grandchild 3" },
                { name: "Grandchild 4" },
            ],
        },
    ],
}
// Sample data
const data = [
    { x: 1, y: 3 },
    { x: 2, y: 4 },
    { x: 3, y: 2 },
    { x: 4, y: 5 },
    { x: 5, y: 1 },
];


const survey = [
    { question: "donâ€™t go out after dark", yes: 16 },
    { question: "do no activities other than school", yes: 89 },
    { question: "engage in political discussion and social movements, including online", yes: 10 },
    { question: "would like to do activities but are prevented by safety concerns", yes: 73 }
]

Template.gaMeDashboard.rendered = (function () {
    // const myPlot1 = Plot.plot({
    //     axis: null,
    //     label: null,
    //     height: 260,
    //     marginTop: 20,
    //     marginBottom: 70,
    //     title: "Subdued",
    //     subtitle: "Of 120 surveyed Syrian teenagers:",
    //     marks: [
    //         Plot.axisFx({ lineWidth: 10, anchor: "bottom", dy: 20 }),
    //         Plot.waffleY({ length: 1 }, { y: 120, fillOpacity: 0.4, rx: "100%" }),
    //         Plot.waffleY(survey, { fx: "question", y: "yes", rx: "100%", fill: "orange" }),
    //         Plot.text(survey, { fx: "question", text: (d) => (d.yes / 120).toLocaleString("en-US", { style: "percent" }), frameAnchor: "bottom", lineAnchor: "top", dy: 6, fill: "orange", fontSize: 24, fontWeight: "bold" })
    //     ]
    // });
    // const myPlot2 = Plot.plot({
    //     marks: [
    //         Plot.dot(data, { x: "x", y: "y" })
    //     ],
    //     x: { label: "X Axis" },
    //     y: { label: "Y Axis" },
    // });


    // // Append the plot to the div
    // $('#plot1').append(myPlot1);
    // $('#plot2').append(myPlot2);


    // set the dimensions and margins of the graph
    var margin = { top: 20, right: 25, bottom: 30, left: 40 },
        width = 450 - margin.left - margin.right,
        height = 450 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    var svg = d3.select("#div_template")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

    //Read the data
    d3.csv("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/heatmap_data.csv", function (data) {

        // Labels of row and columns -> unique identifier of the column called 'group' and 'variable'
        var myGroups = d3.map(data, function (d) { return d.group; }).keys()
        var myVars = d3.map(data, function (d) { return d.variable; }).keys()

        // Build X scales and axis:
        var x = d3.scaleBand()
            .range([0, width])
            .domain(myGroups)
            .padding(0.05);
        svg.append("g")
            .style("font-size", 15)
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x).tickSize(0))
            .select(".domain").remove()

        // Build Y scales and axis:
        var y = d3.scaleBand()
            .range([height, 0])
            .domain(myVars)
            .padding(0.05);
        svg.append("g")
            .style("font-size", 15)
            .call(d3.axisLeft(y).tickSize(0))
            .select(".domain").remove()

        // Build color scale
        var myColor = d3.scaleSequential()
            .interpolator(d3.interpolateInferno)
            .domain([1, 100])

        // create a tooltip
        var Tooltip = d3.select("#div_template")
            .append("div")
            .style("opacity", 0)
            .attr("class", "tooltip")
            .style("background-color", "white")
            .style("border", "solid")
            .style("border-width", "2px")
            .style("border-radius", "5px")
            .style("padding", "5px")

        // Three function that change the tooltip when user hover / move / leave a cell
        var mouseover = function (d) {
            Tooltip
                .style("opacity", 1)
            d3.select(this)
                .style("stroke", "black")
                .style("opacity", 1)
        }
        var mousemove = function (d) {
            Tooltip
                .html("The exact value of<br>this cell is: " + d.value)
                .style("left", (d3.mouse(this)[0] + 70) + "px")
                .style("top", (d3.mouse(this)[1]) + "px")
        }
        var mouseleave = function (d) {
            Tooltip
                .style("opacity", 0)
            d3.select(this)
                .style("stroke", "none")
                .style("opacity", 0.8)
        }


        // add the squares
        svg.selectAll()
            .data(data, function (d) { return d.group + ':' + d.variable; })
            .enter()
            .append("rect")
            .attr("x", function (d) { return x(d.group) })
            .attr("y", function (d) { return y(d.variable) })
            .attr("rx", 4)
            .attr("ry", 4)
            .attr("width", x.bandwidth())
            .attr("height", y.bandwidth())
            .style("fill", function (d) { return myColor(d.value) })
            .style("stroke-width", 4)
            .style("stroke", "none")
            .style("opacity", 0.8)
            .on("mouseover", mouseover)
            .on("mousemove", mousemove)
            .on("mouseleave", mouseleave)
    })



    const usjson = { "type": "Topology", "transform": { "scale": [0.004301824545456547, 0.002740583313729112], "translate": [-178.80671905619894, 17.781073394868724] }, "arcs": [[[13941, 11391], [148, 0], [179, 1], [92, -1]], [[14360, 11391], [0, -56], [-2, -292], [-1, -25], [1, -223], [0, -39], [0, -48], [0, -214], [0, -42], [29, -157]], [[14387, 10295], [-131, 1], [-29, 0], [-87, 1], [-4, 0], [-230, 0], [-104, -30], [-101, -30], [-31, -9], [-50, -32], [-102, 5], [-61, -35], [-122, 20], [-19, 10], [-93, -27], [-76, -37], [-89, 21], [-30, 44], [-5, 45], [-28, 85], [-72, 33]], [[12923, 10360], [0, 1], [-119, 42], [-68, 9], [29, 85], [-47, 89], [-60, 270], [-60, 127], [-28, 105], [22, 80], [153, -81], [245, -37], [70, -64], [-84, -103], [-8, -32], [62, 54], [47, -96], [-18, 0], [-1, 0], [-39, -16], [-64, -96], [88, 0], [65, 82], [5, 166], [21, 63], [-21, 102], [-2, 8], [5, 17], [-62, 41], [38, 86], [-63, 130], [443, -1], [469, 0]], [[17144, 11391], [234, 0]], [[17378, 11391], [0, -133], [1, -89], [0, -144], [0, -218], [0, -25], [0, -251], [0, -37], [0, -95], [0, -122]], [[17379, 10277], [0, -23], [1, -245], [-4, -78]], [[17376, 9931], [-228, 1], [-12, 0], [-217, -3], [-56, 1], [-383, 2], [-78, 0], [-87, 0], [-273, 1], [-290, -1], [-3, -122], [2, -70]], [[15751, 9740], [-77, 101], [-22, -15], [-33, -58], [-199, -26], [-80, -38], [-44, 27], [-29, 118], [-76, 34], [-23, 90], [-89, 213], [-78, -78], [-67, 27], [35, 108], [-11, 89], [30, 206], [-62, -10], [-18, 38], [-66, 71], [-156, 200], [-22, 78], [-76, 104], [0, 86], [1, 105], [0, 182]], [[14589, 11392], [306, 0], [154, -1], [436, 0], [214, -1], [123, 1], [291, 0], [292, 0], [245, 0], [249, 0], [245, 0]], [[15751, 9740], [0, -179], [1, -176], [0, -68], [0, -108], [-1, -185], [0, -186]], [[15751, 8838], [-107, -1], [-140, -1], [-13, 0], [-194, 0], [-242, -1]], [[15055, 8835], [-56, 0], [-176, 1], [-460, 1], [-2, 0]], [[14361, 8837], [0, 613], [10, 73], [20, 100], [-75, 54], [0, 67], [75, 130], [27, 87], [22, 68], [52, 127], [-77, 88], [-28, 51]], [[14360, 11391], [229, 1]], [[18277, 11391], [153, 0], [122, 0], [244, 0], [167, 0]], [[18963, 11391], [32, -114], [-16, -52], [5, -128], [-1, -7], [58, -182], [10, -64], [5, -96], [-2, -31], [10, -190], [3, 0], [42, -109], [6, -113], [3, -32]], [[19118, 10273], [-154, 0], [-175, 0], [-7, 0], [-166, 1], [-65, 1], [-166, 0], [-38, 0], [-147, 1], [-345, 0], [-1, 0], [-219, 1], [-12, 0], [-244, 0]], [[17378, 11391], [258, 0], [214, 0], [121, 0], [306, 0]], [[19407, 11391], [39, 0], [0, 141], [76, -33], [32, -189], [60, -28], [135, -25], [13, -42], [164, 40], [300, -154], [54, -59], [124, 54], [68, -35], [141, 6], [60, -46], [-24, -57], [-107, -36], [-136, -97], [-179, -191], [-95, -102]], [[20132, 10538], [-21, 1], [0, -90], [0, -95], [-13, -51], [-84, -45], [-30, -60], [-11, -31], [56, -74], [-23, -53], [-3, -32], [-3, -127], [-8, -41], [17, -12], [97, -64], [17, -31], [37, -17], [52, -79], [69, -61], [32, -15], [32, -50], [7, -43], [9, -83]], [[20361, 9385], [-92, 0], [-27, 0], [-81, 0], [-86, 0], [-25, 0], [-109, -1], [-6, 0], [-104, 0], [-35, 0], [-75, 0], [-65, 1], [-45, 0], [-96, 0], [-13, 0], [-111, 0], [-15, 0], [-94, -1], [-45, 1], [-93, 0]], [[19144, 9385], [0, 127], [0, 127]], [[19144, 9639], [0, 126], [0, 32], [0, 64], [0, 63], [0, 106], [-4, 21], [-85, 95], [63, 127]], [[18963, 11391], [192, 0], [252, 0]], [[25761, 9750], [-135, -35], [-57, 102], [-1, -1], [-2, -80], [-47, -78], [-75, -86], [-86, -27], [-10, -64], [-3, 0], [-7, 95], [12, 42], [-1, 0], [-37, -80], [12, 10], [-3, -20], [-62, -34], [-48, -97], [-74, -169], [-37, 23]], [[25100, 9251], [-31, 148], [-6, 91], [-5, 181], [-17, 372]], [[25041, 10043], [58, -10], [66, 142], [67, 81], [-7, 111], [63, 139], [6, 44], [179, 279], [76, -103], [155, 65], [103, -105], [-4, -506], [89, -37], [-15, -108], [75, -45], [43, -129], [-49, -59], [-138, -14], [-47, -38]], [[20879, 10332], [-218, 70], [-114, 101]], [[20547, 10503], [123, 73], [110, 28], [112, 69], [70, 72], [42, -106], [94, -10], [96, -36], [70, -116], [50, 0], [112, -30], [116, 95], [63, 6], [146, 24], [47, -97], [103, -27], [58, 32], [63, -149], [-10, -41], [-23, 1], [-4, 0], [-99, 25], [-81, -17], [-98, 35], [-102, -49], [-104, -18], [-34, -59], [-75, 38], [-112, -113], [-82, -164]], [[21198, 9969], [-63, 92], [10, 134], [-50, 22], [-13, 51], [-132, 34], [-58, 22], [-13, 8]], [[22181, 10007], [16, -127], [0, -126], [-5, -67], [-52, -60], [-80, -93], [-1, -85], [50, -32], [54, 51], [47, 90], [78, 34], [43, -28], [32, -110], [24, -190], [19, -71], [-23, -127], [-43, 22], [-39, -86], [-48, -51], [-28, -101], [-66, -111]], [[22159, 8739], [-65, -3], [-27, -1], [-112, -5], [-9, 0], [-95, -4]], [[21851, 8726], [-4, 24], [-86, -1], [-23, 1], [-85, -1], [-29, 0], [-65, 1], [-38, 0], [-69, -1], [-70, 1]], [[21382, 8750], [48, 49], [59, 127], [21, 64], [15, 127], [-14, 128], [-44, 129], [7, 127], [-19, 80], [29, 51], [35, 124], [37, 95], [1, 42], [118, 61], [-18, -104], [46, 31], [13, 127], [68, 57], [-6, 74], [90, 80], [123, -59], [22, -43], [143, -55], [25, -55]], [[20990, 10766], [68, 59], [86, 10], [-88, -100], [-66, 31]], [[22139, 10268], [-65, 15], [65, -15]], [[21198, 9969], [-34, -50], [-52, -105], [-1, 0], [-1, 0], [54, -12], [6, 12], [84, -1], [-39, -127], [-44, -158], [-14, -128], [-23, -128], [15, -128], [5, -63], [0, -64]], [[21154, 9017], [-91, 1], [-25, 0], [-94, -1], [-16, 0], [-38, 1], [-99, 2], [-8, 0], [-101, 2], [-21, 0], [-116, 0], [-50, 1]], [[20495, 9023], [-60, 60], [-60, 115], [-5, 33], [28, 65], [-34, 60], [-3, 29]], [[20132, 10538], [151, 34], [160, 76], [-15, -138], [88, -1], [31, -6]], [[14361, 8837], [-272, -1], [-262, -1], [-8, 0], [-149, 0]], [[13670, 8835], [-204, 0], [-132, 1], [-196, 4], [-219, -1], [-67, -2], [-70, -2], [-91, 2]], [[12691, 8837], [-50, 122], [9, 88], [-21, 139], [61, 239], [14, 92], [10, 151], [26, 280], [16, 132], [-8, 138], [14, 145], [126, -15], [35, 12]], [[19144, 9385], [-34, 0], [10, -88], [24, -65], [-20, -63], [9, -127], [12, -26]], [[19145, 9016], [-43, 12], [-40, 66], [-49, 21], [-34, 14], [-75, 18], [-35, 1], [-120, -5], [-37, 16], [-44, 43], [-176, -1], [-64, 0], [-155, 1], [-239, -1], [-199, 1], [-165, 0], [-48, 0], [-117, 0], [-128, 2]], [[17377, 9204], [0, 172], [0, 10], [0, 127], [0, 105], [0, 15], [0, 142], [-1, 156]], [[25100, 9251], [-13, -19], [16, -77]], [[25103, 9155], [-99, -47], [-3, -2], [-149, -9], [-7, 0], [-83, 3], [-40, 2]], [[24722, 9102], [-23, 47], [24, 112], [5, 26], [24, 134], [29, 62], [38, 141], [47, 70], [17, 21], [53, 65], [-22, 60], [30, 97]], [[24944, 9937], [33, 92], [64, 14]], [[24852, 9935], [92, 2]], [[24722, 9102], [-110, 5], [-22, 1], [-56, 1]], [[24534, 9109], [-2, 72], [5, 136], [-25, 160], [-4, 20], [-14, 86], [29, 80], [-6, 103], [-5, 7], [4, 163]], [[24516, 9936], [35, 1], [149, -2], [152, 0]], [[24534, 9109], [-20, -86], [-34, -168], [2, 0]], [[24482, 8855], [-7, -139], [-2, -51], [-4, -59], [15, -56], [-41, -81]], [[24443, 8469], [0, -6], [-32, -33], [-28, -32], [-2, 30], [3, 13], [8, 100], [-24, 49], [-1, -1], [19, -117]], [[24386, 8472], [-72, 49], [-4, 4], [-32, 20], [-78, 57]], [[24200, 8602], [-12, 25], [-73, 65], [-17, 91], [-51, 54], [-28, 0], [-145, 0], [-10, 0], [-95, 0], [-86, 0], [-9, 0], [-150, 0], [-32, -1], [-107, 1], [-23, 0], [-142, -1], [-33, 1], [-128, -1], [-35, 99]], [[23024, 8935], [145, 110], [66, 79], [-7, 87], [-42, 87], [139, 39], [110, -2], [98, -46], [46, 14], [89, -6], [62, 29], [25, 29], [89, 40], [12, 55], [-3, 0], [-1, 0], [-19, 121], [-7, 69], [105, 74], [134, 162], [130, 54], [162, 0], [159, 6]], [[24418, 8334], [5, 6], [-26, 5], [-24, 31], [49, 16], [66, 29], [71, 40], [159, 7], [10, -48], [-231, -73], [-73, -23], [-6, 10]], [[17377, 9204], [0, -144], [0, -222], [0, -111], [0, -49], [0, -62], [0, -143]], [[17377, 8473], [-207, -1], [-77, 0], [-213, 0], [-30, 0], [-125, 1], [-107, 0], [-139, 0], [-263, 0]], [[16216, 8473], [-221, -2], [-11, 0], [-233, 1], [1, 92], [0, 120], [-1, 154]], [[20495, 9023], [39, -47], [36, -68], [38, -59], [1, -38], [-21, -53], [-17, -20], [-7, -51], [-103, -49], [-66, -44]], [[20395, 8594], [28, -95], [0, -1], [-38, -137], [-17, -21], [-54, -95]], [[20314, 8245], [-69, 81], [-53, 2], [-55, -1], [-39, -2], [-67, -2], [-18, -1], [-89, -2], [-64, -1], [-43, 0], [-50, -1], [-56, -1], [-51, -1], [-55, 0], [-38, 0], [-66, 1], [-66, 1], [-40, 1], [-91, 2]], [[19304, 8321], [-16, 72], [5, 43], [-16, 56], [0, 39], [-10, 11], [-3, 73], [-14, 42], [-29, 64], [-4, 67], [-31, 66], [-20, 62], [0, 22], [-21, 78]], [[19304, 8321], [13, -23], [36, -94], [0, -1], [57, -96]], [[19410, 8107], [-7, 0], [-105, 1], [-51, 0], [-53, 0], [-53, 0], [-79, 0], [-26, 0], [-105, 0], [-105, 0], [-26, 0], [-79, 0], [-54, 0], [-52, 0], [-79, 0], [-26, 0], [-104, 0]], [[18406, 8108], [-128, 0], [-4, 0], [-126, 0], [-5, 0], [-132, 0], [-20, 0], [-149, 0]], [[17842, 8108], [0, 127], [0, 33], [0, 94], [0, 19], [0, 92], [-132, 0], [-7, 0], [-170, 0], [-45, 0], [-111, 0]], [[25049, 8980], [-6, 0], [3, -8]], [[25046, 8972], [5, -32], [26, -13], [24, 7], [10, -9], [57, -157], [33, -68], [-52, 45], [-52, -43], [-64, -48]], [[25033, 8654], [-18, 65]], [[25015, 8719], [-7, 13]], [[25008, 8732], [-21, 23], [-15, 77], [-27, 11], [-70, -3]], [[24875, 8840], [-71, 8], [-7, 0], [-87, 2], [-116, 1], [-11, 1], [-101, 3]], [[25103, 9155], [38, -102], [-77, -58], [-15, -15]], [[21154, 9017], [11, -124], [55, -163]], [[21220, 8730], [-1, -88], [0, -61], [0, -48], [0, -57], [0, -100], [0, -89], [0, -6], [-1, -120], [-1, -96], [1, -101], [0, -47], [-17, -80], [-6, -37], [25, -93], [-2, -18], [-28, -104], [-22, -56], [-56, -58], [0, -9], [-25, -124], [15, -34]], [[21102, 7304], [-24, -82], [17, -25], [-69, -37], [-14, 7], [-17, -129], [-18, 4], [-84, 53], [-1, 0], [-55, -59], [8, -30]], [[20845, 7006], [-42, 11], [-40, 87], [1, 31], [-9, 84], [0, 2], [-35, 85], [-62, 26], [-62, 78], [-11, 14], [-21, 95], [18, 49], [2, 4], [18, 47], [3, 41], [12, 12], [-37, 43], [-41, 16], [-50, -13], [-13, 106], [-50, 64], [-56, 73], [-29, 31], [-15, 27], [-16, 68], [-16, 94], [2, 17], [18, 47]], [[24200, 8602], [-67, -96], [6, 1], [-36, -46], [-18, -132], [2, -6], [57, -91], [51, -71], [-58, -36], [-20, -20]], [[24117, 8105], [-37, -45], [-48, -23]], [[24032, 8037], [-36, 11], [-3, 0]], [[23993, 8048], [-45, -42]], [[23948, 8006], [-81, 0], [-23, 0], [-1, 0], [-77, 0], [-51, -1], [-49, 0], [-50, 0], [-57, 0], [-2, 0], [-147, 1], [-56, 0], [-9, 0], [-99, 0], [-29, 0], [-107, 0], [-20, 0]], [[23090, 8006], [-66, -1], [-36, 0], [-117, 1], [-23, 0], [0, 88], [0, 19], [0, 53], [0, 87], [0, 29], [0, 58]], [[22848, 8340], [0, 78], [0, 18], [0, 82], [0, 3], [0, 130], [0, 3], [0, 128], [0, 47]], [[22848, 8829], [176, 106]], [[24875, 8840], [2, -103], [1, -31], [-1, -16], [-13, -97]], [[24864, 8593], [-112, -20], [-24, 54], [-27, -59], [1, -1], [2, -2], [-133, -8], [-128, -88]], [[25008, 8732], [-29, 15], [-9, 4], [-9, -41], [-13, -102], [-84, -15]], [[25033, 8654], [-18, 65]], [[13670, 8835], [0, -296], [0, -533], [-1, -100], [-1, -48], [1, -55], [0, -19], [1, -17], [22, -49], [76, -81], [58, -64], [40, -44], [170, -189], [138, -158], [155, -180], [296, -354], [56, -69], [237, -296]], [[14918, 6283], [68, -200], [47, -54], [-69, -79], [-15, -143], [-30, -94], [-18, -128], [44, -22], [-3, -98], [-44, -14]], [[14898, 5451], [-323, -37], [-237, -31], [-46, 212], [-63, 99], [-120, 131], [-41, -15], [-59, 122], [-94, 2], [-62, 37], [-61, 84], [-123, 31], [-108, -4], [-41, 48], [-1, 144], [0, 63], [-162, 236], [-86, 146], [-42, 40], [-18, 100], [40, 101], [-114, 92], [-52, 150], [3, 69], [26, 0], [64, -88], [30, -1], [-79, 122], [4, 36], [11, 57], [27, -11], [31, 13], [65, -14], [35, 8], [3, 24], [-20, 27], [-34, -44], [-30, -3], [-29, 30], [-18, -34], [-37, 42], [-2, 0], [-24, -1], [0, 1], [-33, 0], [4, -123], [-80, 74], [-30, 100], [-123, 172], [-68, 212], [-7, 177], [-39, 61], [-79, 94], [-11, 67], [44, 88], [36, 285], [-34, 195]], [[16216, 8473], [0, -127], [-1, -157], [0, -206], [0, -59], [0, -48], [-2, -316], [4, -127], [1, -99], [-1, -144], [0, -178]], [[16217, 7012], [-222, 0], [-175, 2], [-154, -1], [-262, 0], [-83, 0], [-268, 0]], [[15053, 7013], [0, 220], [0, 199], [0, 155], [0, 38], [1, 316], [0, 132], [0, 77], [1, 322], [0, 363]], [[15053, 7013], [0, -58], [2, -237], [-166, -39], [19, -209], [25, -128], [-15, -59]], [[22848, 8340], [-35, -20], [9, -68], [-12, -77], [-5, -10], [-7, -45], [-21, -68], [-2, -47], [-26, -41], [-22, -24], [-19, -30], [-58, -43], [-83, -46], [-7, -13], [2, -30], [-37, -80], [-44, 31], [-27, -136], [-17, -3], [-51, -62], [-21, 3]], [[22365, 7531], [-16, 31], [-35, 24], [-50, 56], [-55, -39], [-88, 7], [-14, 0], [-46, 48], [-35, 1], [-41, 20], [0, 18], [-21, 53], [-43, 27], [-27, -7], [-46, 11]], [[21848, 7781], [0, 73], [1, 79], [0, 17], [0, 58], [1, 69], [0, 32], [2, 112], [0, 15], [0, 80], [0, 57], [0, 71], [0, 24], [0, 96], [0, 7], [0, 57], [0, 38], [-1, 60]], [[22159, 8739], [3, 1], [1, 0], [2, 0], [68, -40], [29, -61], [-4, 0], [-1, 0], [37, -10], [129, -1], [88, 28], [52, -6], [60, 53], [113, 81], [112, 45]], [[21848, 7781], [-13, -27], [1, -48], [18, -16], [-53, -35], [-42, -25], [-30, 16], [-22, -54], [-1, -23], [-48, -53], [-36, -33], [-25, -40], [-11, -63], [-12, -3], [-77, 67], [-30, -22], [-7, -28], [-39, -74], [-36, 57], [-39, -25], [-67, -19], [-8, 8], [-35, 15], [-58, -16], [-52, 2], [-24, -38]], [[21220, 8730], [70, -30], [67, 31], [25, 19]], [[24386, 8472], [-21, -72], [-29, -25], [-10, -17], [-11, -33], [-3, -53], [51, -15], [-22, -105], [-24, -138], [-50, -67], [-1, -1], [2, -71], [-57, -27], [-60, -41], [-105, 61], [-10, 14], [-1, 1], [-1, 1], [-29, 40], [1, 0], [-5, 40], [0, 8], [31, 57], [68, 36], [18, 39], [-1, 1]], [[17842, 8108], [1, -156], [0, -2], [0, -159], [1, -31], [0, -128], [0, -30], [0, -126], [0, -3], [1, -191], [0, -34], [0, -93], [0, -145]], [[17845, 7010], [-224, 3]], [[17621, 7013], [-19, 0], [-214, -2], [-267, 0], [-15, 0], [-116, 0], [-67, 0], [-109, -1], [-220, 3], [-14, 0], [-208, 0], [-155, -1]], [[23090, 8006], [-2, -188], [50, 44], [47, 56], [96, 20], [44, -7], [31, 44], [72, -6], [46, -46], [25, -64]], [[23499, 7859], [-26, -68], [-47, 48], [-46, 46], [-27, 28], [-38, -138], [-8, -12], [-76, -107], [-43, 0], [-39, -104], [-21, -24], [-78, 65], [-34, -118], [-38, -74], [-22, -41], [-56, -95], [17, -23], [-59, -75], [-89, 2]], [[22769, 7169], [-29, -49], [-56, -22], [-32, 38], [-88, -37], [-43, 101], [-10, 9]], [[22511, 7209], [-85, 74], [-19, 42], [-19, 33], [-25, 110], [2, 63]], [[20845, 7006], [8, -14], [-5, -58], [-13, -48], [-35, -8], [-21, -48]], [[20779, 6830], [-15, 0]], [[20764, 6830], [-13, 0]], [[20751, 6830], [-1, -59], [-20, -56], [-18, -66]], [[20712, 6649], [-59, -1], [-76, -1], [-21, -1], [44, 75], [-7, 108], [-83, 1], [-48, 0], [-80, -1], [-65, 0], [-10, 0], [-52, 1], [-104, 0], [-7, 0], [-88, 0], [-57, -1], [-18, 0], [-103, 1], [-5, 0], [-62, 0], [-66, 0], [-49, 0], [-126, 0]], [[19570, 6830], [0, 62], [0, 36], [0, 84]], [[19570, 7012], [0, 21], [0, 103], [0, 10], [0, 105], [0, 7], [1, 133], [0, 9], [1, 119], [0, 33], [1, 95], [0, 40], [0, 72], [0, 25], [1, 17], [-40, 14], [-45, 80], [-31, 42], [11, 33], [41, 72], [-27, 28], [-73, 37]], [[19570, 7012], [-90, 1], [-15, 0], [-78, -1], [-27, 0], [-61, 0], [-42, 0], [-8, 0], [-122, 0], [-52, 0], [-93, 0], [-73, 0], [-79, 0], [-72, 0], [-54, 0], [-46, 0], [-106, 1], [-106, 0], [-20, 0], [-107, 0], [-20, 1], [-127, -1], [-73, -1], [-28, 0], [-113, -1], [-110, -1], [-3, 0]], [[23963, 7680], [-6, 115], [-2, 37], [-1, 19], [-1, 29], [-5, 126]], [[24032, 8037], [-44, -70], [23, -92], [47, -151], [52, -54], [9, -128], [-4, 0], [-4, 0]], [[24111, 7542], [-59, 1], [-84, 39], [-2, 27], [-3, 71]], [[24111, 7542], [-5, -19], [-63, -140]], [[24043, 7383], [-56, -7]], [[23987, 7376], [-1, 0], [-54, 27], [14, 72], [-8, 57], [-79, -37], [-38, 56], [39, 53], [28, -21], [25, 42], [1, 43], [-5, -44], [-16, -35], [-34, 39], [-40, 23], [53, 64], [30, 117], [35, 47], [-56, 62], [-66, -55], [-40, -56], [-12, -12], [1, 0], [10, 0], [15, -108], [-14, -72], [-39, -18], [0, -45], [0, -16], [50, -64], [-90, 25], [-94, 34], [46, 75], [14, 44]], [[23662, 7673], [3, 57], [-27, -11]], [[23638, 7719], [-48, 44], [-30, 61], [-51, 37], [-10, -2]], [[23897, 7370], [3, -9], [-3, 0], [-3, 7]], [[23894, 7368], [3, 2]], [[23894, 7368], [-1, -7], [-1, 0], [2, 7]], [[23638, 7719], [6, -10]], [[23644, 7709], [11, -24], [-1, -19], [-44, -44], [-14, -60], [-6, -61], [69, -26], [97, -43], [8, -49], [78, -48], [-25, -66], [0, -30], [-62, 68], [-74, 100], [-29, 30], [-1, 0], [89, -143], [31, -74], [26, -21], [-2, -22], [-60, 0], [-22, 51], [-39, -3], [49, -45], [19, -33], [60, -84], [13, 9], [-5, -18], [-2, -45], [-51, 65], [-62, 73], [-87, 5], [-15, 2], [-1, -29], [15, -6], [57, -21], [77, -34], [35, -85], [28, -4], [5, -21], [-4, -9], [25, 6], [11, 1], [5, 1], [3, -1], [7, 32], [44, -3], [29, -132]], [[23929, 6849], [-5, 0]], [[23924, 6849], [-12, 61], [-9, -61]], [[23903, 6849], [-8, 0]], [[23895, 6849], [-5, 0]], [[23890, 6849], [-20, 0], [-44, 0], [-42, 0], [-12, 0], [-86, 0], [-1, -3], [-57, 1], [-31, 0], [-109, 0], [-31, 0], [-34, -1], [-65, 0], [-31, 0], [-64, 0], [-15, -1], [-79, 0], [-19, 0], [-29, 0], [-29, 0], [-10, 0], [-47, 1], [-73, 0], [-6, 0], [-90, 3], [-40, 2], [-52, 1], [-15, 1], [-105, 5], [-75, 4]], [[22579, 6862], [7, 9], [-42, 1], [-74, -7], [-23, 0], [-12, 0], [-73, 0], [-51, -1], [-36, 0], [-114, 2], [-47, 1]], [[22114, 6867], [50, 23], [135, 83], [3, 30], [70, 81], [3, 3], [56, 35], [80, 87]], [[23936, 7215], [10, 78], [41, 83]], [[24043, 7383], [-20, -42], [-37, -120], [-40, -25], [-10, 19]], [[23906, 6852], [11, -3]], [[23917, 6849], [-10, 0]], [[23907, 6849], [-1, 3]], [[22114, 6867], [-59, -5], [-19, 1], [-50, 1], [-8, 0], [-120, 4], [-2, 0], [-44, 4], [-70, 4], [-5, 0], [-32, -3], [-82, 2], [-43, 2], [-54, 4], [-48, 4], [-35, -6], [-47, 6], [-69, -2], [-12, -1], [-52, 0], [-71, -1], [-12, -1], [-88, 15], [4, -66], [-101, 2], [-6, 0], [-70, 0], [-2, 0], [-2, 0], [-119, 0], [-17, -1]], [[23662, 7673], [-18, 36]], [[16217, 7012], [0, -363], [0, -381], [-1, -139], [0, -292], [0, -208], [0, -157], [0, -128], [0, -399]], [[16216, 4945], [-328, 0], [-143, 0], [-68, 34], [-457, 223], [-344, 167], [22, 82]], [[19570, 6830], [13, -123], [3, -22], [13, -125], [5, -44], [10, -88], [0, -6], [-4, -163], [-2, -75], [-1, -81], [-2, -116], [-2, -90], [-2, -111]], [[19601, 5786], [-60, 24], [-96, 85], [-36, -21], [-104, -2], [-20, -12], [-57, 6], [-67, -48], [-49, 62], [-80, 21], [-2, -2], [-35, -56], [-91, 44], [-18, -5], [-29, 31], [-68, -35], [-37, 92], [-66, -22], [-44, 27], [-79, 21], [-60, 45], [-62, 22], [-85, 40], [-36, 20], [-1, 67], [0, 104], [0, 56], [0, 87], [0, 72], [0, 95], [0, 64], [-1, 162], [-126, 0], [-94, 0], [-31, 0], [-125, 0], [-95, 0], [-30, 0], [-196, 0]], [[17621, 6830], [0, 183]], [[17621, 6830], [-9, -162], [0, -115], [0, -43], [0, -160], [0, -84], [0, -75], [0, -159], [0, -4], [-1, -174], [-1, -93], [-1, -66], [-2, -157], [0, -159], [0, -159], [-61, -32], [-92, 0], [-60, 0], [-10, 0], [-192, 0], [-16, 0], [-251, 1], [-88, 0], [-35, -80]], [[16802, 5109], [-179, 0], [-212, 0], [0, -164], [-195, 0]], [[22579, 6862], [-12, -71], [-44, -38], [-4, -8], [-34, -59], [-33, 19], [-45, -31], [-21, -34], [-23, 22], [-68, -34], [-15, -56], [-68, -28], [0, -7], [-95, -46], [-67, -40], [-2, 1], [-16, -62], [-61, -32], [-7, -79]], [[21964, 6279], [-70, 0], [-36, 0], [-8, -1], [-39, 0], [-66, -1], [-23, 0], [-26, 0], [-30, 0]], [[21666, 6277], [-61, 2], [-103, 1], [-2, 0], [-108, 0], [-12, 0], [-88, 3], [-3, 0], [-89, 1], [-88, 1], [-50, -4]], [[21062, 6281], [-38, 0], [-4, 0], [-94, 0], [-8, 0], [-46, 0], [-42, 0], [-36, 0], [-67, 0], [-19, 0], [-136, 0]], [[20572, 6281], [54, 142], [-15, 19], [20, -17], [3, 3], [31, 51], [62, 134], [-15, 36]], [[20751, 6830], [13, 0]], [[23890, 6849], [20, -104], [-15, 28], [-50, 10], [-13, -56], [-48, -48], [-44, 78], [-60, 39], [50, -59], [5, -117], [78, 3], [71, 21], [-23, -107], [34, -10], [29, -11], [-61, -110], [-80, 86], [-18, -67], [-120, 62], [-2, -3], [113, -100], [4, -74], [-80, 5], [-45, -6], [5, 0], [99, -63], [41, -64], [-150, 15], [-85, -118], [-51, -54], [5, 1], [1, -2], [-57, -36], [1, -79], [-140, -39], [-3, 3], [-1, 1]], [[23300, 5874], [-18, 24], [-98, 129], [0, 1], [-88, 117], [-2, 3], [-53, 64], [-56, 0]], [[22985, 6212], [-91, 3], [-57, 1], [-64, 67], [-15, 28], [-30, 26], [-68, 6], [-9, 0], [-93, 6], [-25, 1], [-22, 1], [-58, 3], [-32, -1], [-51, -17], [-44, -28], [-31, -5], [-26, -10], [-23, -10]], [[22246, 6283], [-87, -3], [-16, 0], [-90, -2], [-16, 0], [-29, 0], [-44, 1]], [[23950, 6732], [-26, 117]], [[23929, 6849], [22, -117], [-1, 0]], [[23895, 6849], [22, 0]], [[23907, 6849], [-4, 0]], [[23956, 6353], [54, 28], [12, 114], [-3, 33], [5, -29], [-17, -135], [-50, -13], [-1, 2]], [[19601, 5786], [103, -31], [0, -103], [0, -92]], [[19704, 5560], [0, -50], [0, -69], [0, -110], [0, -71], [6, -79], [32, -50], [11, -94], [27, -26], [27, -123], [11, 3], [-1, -115], [-43, -171], [8, -57], [-3, -71], [-31, -68], [4, -63]], [[19752, 4346], [-120, -48], [-4, -2], [-23, 1], [-63, -11], [-43, 56], [-22, -48], [27, -91], [-36, -36], [-104, -137], [-100, -47], [-26, -41], [-64, 21], [-16, 12], [-8, 12], [-29, -24], [-5, 23], [-19, 6], [-1, -1], [0, 1], [0, -7], [61, -95], [-59, -44], [-31, 46], [-2, -47], [-1, -16], [0, -18], [-3, -2], [-7, -12], [-41, 6], [-53, -51], [13, -33], [1, -1], [11, -24], [0, -1], [-1, -3], [-81, -20], [37, -44], [1, -58], [-33, -56], [-72, -45], [76, -61], [-25, -52], [26, -136], [5, -31], [0, -27], [-5, -11], [13, 0], [42, -127], [-72, -65], [-80, 68], [-76, -7], [-92, 75], [-122, 62], [-14, 53], [-23, 99], [-41, 64], [-2, 90], [-32, 136], [-66, 59], [-13, 66], [-65, 79], [-44, 142], [-58, 130], [-4, 51], [-29, 58], [-109, 108], [-45, 91], [-71, -2], [-130, 35], [-81, -48], [-48, -143], [-64, -139], [-66, 26], [-83, 79], [-68, 31], [-99, 109], [-39, 98], [-2, 97], [-68, 164], [-97, 84], [-140, 193], [-51, 33], [-72, 111]], [[19056, 3769], [54, 64], [-56, -72], [2, 8]], [[18931, 3326], [-1, 127], [3, 12], [26, 111], [6, -2], [-29, -109], [-5, -139]], [[18957, 3184], [-2, 2], [-15, 17], [5, 15], [-6, 27], [7, -9]], [[18946, 3236], [4, -18], [7, -34]], [[18946, 3236], [-12, 27], [-6, 60], [3, 3]], [[18931, 3326], [15, -90]], [[20572, 6281], [1, -49], [-24, -10], [-41, -70], [4, -42], [-2, -41], [-88, -107], [0, -1], [-31, -57], [15, -72], [-48, -74], [4, -12], [29, -142], [-18, -47], [0, -2]], [[20373, 5555], [-23, 0], [-40, 0], [-5, 0], [-142, 1], [-153, 2], [-61, 2], [-58, 0], [-58, 0], [-7, 0], [-66, 0], [-3, 0], [-53, 0]], [[23300, 5874], [-100, -112], [-44, -146], [-49, 4], [-82, -122], [-9, 31], [-36, -9], [-9, -106], [-61, -32], [-21, -12], [-18, 39], [-36, -14], [-60, 2], [0, -41], [-1, -16], [2, -2], [-2, -4], [-5, -7], [-21, -91], [-39, -5]], [[22709, 5231], [-6, 40], [-32, 120], [-25, 15], [-4, 54], [-32, 110], [-17, 18], [-33, 37], [-22, 18], [-37, 104], [-4, 5], [-20, 19], [-27, 35], [-78, 96], [-7, 21], [-34, 71], [-7, 30], [-50, 70], [-15, 4], [-12, 16], [-54, 55], [-4, 10], [57, 104]], [[21086, 6244], [-24, 37]], [[21666, 6277], [5, -45], [11, -86], [2, -13], [3, -24], [12, -86], [9, -75], [6, -43], [2, -23], [12, -91], [8, -62], [2, -20], [13, -109], [1, -7], [11, -87], [12, -45], [12, -51], [19, -35], [7, -49], [11, -53], [-31, -62], [-3, -26], [-17, -77], [4, -6], [19, -90], [-10, -76], [14, -85], [6, -27]], [[21806, 4824], [-113, -2], [-3, 0], [-124, -1], [-36, 0], [-47, 0], [-69, 0], [-23, 1], [-88, 1], [-101, -1], [-8, -48], [53, -69], [-6, -70]], [[21241, 4635], [-30, -77], [-80, 50], [-8, 111], [-19, 11], [0, 9], [4, 7], [-23, -105], [-1, -45], [-67, 4]], [[21017, 4600], [-4, 127], [-3, 96], [-2, 42], [-4, 117], [-3, 96], [-2, 72], [10, 121], [2, 30], [7, 98], [10, 128], [2, 23], [8, 108], [7, 90], [6, 77], [10, 114], [1, 11], [7, 85], [4, 52], [3, 43], [10, 114]], [[22709, 5231], [-27, -82], [-20, -30], [22, -28], [-30, -29], [-29, -115], [1, -1], [7, -2], [-26, -91], [26, -49], [-38, -84]], [[22595, 4720], [-69, 41], [-31, -27], [-3, -143], [-38, 75], [-48, 5], [-9, 1], [-29, 2], [-25, 3], [-104, 9], [-40, 4], [-7, 1], [-4, 0], [-59, 5], [-31, 3], [-61, 5], [-18, 1], [-46, 4], [-23, 1], [-112, 8]], [[21838, 4718], [-32, 106]], [[22659, 4935], [1, 1], [-1, -1]], [[21017, 4600], [-83, -14], [-30, 28], [-107, -19], [-42, -71]], [[20755, 4524], [-39, 102], [-35, 76], [26, 122], [-25, 0], [-98, 0], [-21, 0], [-46, -1], [-5, 0], [-60, 0], [-54, 0], [-27, 0], [-108, 0], [11, 70], [19, 125], [30, 73], [15, 6], [16, 44], [50, 89], [0, 2], [-5, 2], [-16, 31], [12, 128], [6, 6], [-24, 25], [-4, 131]], [[20755, 4524], [-24, -9], [-54, -55], [35, -48], [66, 24], [5, -14], [12, -41], [-22, -14], [-24, -35], [-2, 2], [-2, 0], [-18, -3], [-1, -9], [-39, -76], [-13, 11], [-25, 4], [-45, 82], [29, -92], [-1, -39], [-7, -9], [4, -34], [-6, -15], [-41, -9], [-33, 29], [0, 5], [0, 2], [1, 6], [1, 2], [-42, -7], [-7, -12], [-6, 5], [-17, -34], [-30, 2], [-50, 19], [-48, 94], [11, 52], [-78, -25], [-20, 82], [-52, -2], [-26, 35], [-32, -80], [-45, -30], [-74, 17], [-130, 70], [-153, -29]], [[20760, 4325], [-1, 1], [-4, 5]], [[22595, 4720], [1, -57], [-21, -135], [20, -128], [12, -24], [-22, -36], [-10, -86], [6, -25], [6, -34], [20, -32], [-4, 58], [-25, 31], [0, 56], [21, 9], [-8, 32], [23, 22], [-15, 133], [37, 47]], [[22636, 4551], [49, -213], [-1, 0], [-5, -4], [32, -85]], [[22711, 4249], [74, -232], [12, 0], [1, 0], [37, -74], [-27, -76], [-9, 118], [-25, 32], [-3, 0], [13, -86], [68, -263], [34, -101], [28, -107], [-12, -12], [0, -8], [47, -87], [-6, 0]], [[22943, 3353], [-3, 0], [-2, 0], [14, -10], [-1, -227], [-10, -126], [-1, -27], [-41, -100], [-30, -143], [-2, 0], [-12, -8], [0, -2], [-86, -12], [-49, 29], [-64, 200], [-57, 33], [-49, 74], [-10, 86], [-45, 72], [-5, 88], [-46, 86], [0, -3], [-23, -19], [-49, 162], [3, 93], [39, 64], [-61, 72], [-32, 57], [26, 95], [9, 95], [-28, 111], [0, -1], [-18, 58], [-64, 62], [-69, 79], [3, 48], [-139, 154], [-20, 2], [-87, -46], [-105, -87], [-34, 16], [0, -1], [-39, -30], [-40, 85], [-1, 38], [0, 2], [-140, 85], [-94, 40], [1, 7], [0, 20], [-94, -17], [-88, 50], [-59, -22]], [[21388, 4600], [-28, -6], [0, 1], [28, 7], [0, -2]], [[22636, 4551], [12, 0], [-12, 0]], [[22711, 4249], [-25, 89], [1, 0], [25, -89], [-1, 0]], [[5066, 1241], [23, -5], [-23, 5]], [[5336, 907], [133, -90], [110, -183], [-40, -63], [-124, -79], [-33, -76], [-53, 42], [-1, 112], [-41, 140], [56, 110], [-7, 87]], [[4512, 1622], [15, -97], [-26, -33], [-73, 40], [8, 62], [76, 28]], [[5162, 1186], [139, -87], [-10, -51], [-92, -17], [-37, 155]], [[4841, 1434], [77, -150], [-105, -2], [-41, 103], [69, 49]], [[2260, 12790], [200, 255], [89, -53], [-100, -53], [-43, -67], [-146, -82]], [[2824, 13221], [59, -11], [32, -104], [-314, -165], [33, 73], [112, 65], [-36, 88], [114, 54]], [[3496, 13600], [53, 0], [59, -130], [-70, -31], [-119, 2], [-59, -56], [-115, -17], [66, 167], [185, 65]], [[4629, 14263], [0, -25], [136, 177], [137, 102], [38, 279], [67, 102], [65, 102], [-40, -11], [-228, -89], [-148, 98], [-72, -17], [74, -100], [-66, -46], [-79, 118], [-120, 6], [-110, 102], [-107, -69], [-45, -10], [-8, -7], [-62, -31], [-100, -66], [-6, 155], [57, 47], [-110, 42], [73, 100], [-175, 295], [-4, -101], [-170, -69], [-211, -1], [-121, 148], [87, 147], [130, 79], [-193, -6], [-18, 30], [-60, 6], [-62, -9], [42, 38], [-159, 74], [-117, 148], [11, 66], [115, 11], [-16, 109], [145, 145], [125, 76], [69, -18], [80, -79], [-17, 90], [100, 140], [109, -19], [107, 77], [64, 98], [182, -32], [90, 20], [86, 97], [-73, 263], [69, 81], [-54, 79], [-487, -191], [-114, 56], [-168, -1], [-168, -44], [-277, 53], [-101, 192], [73, 60], [-242, 46], [-157, 64], [113, 79], [98, 17], [118, 85], [284, 120], [241, 65], [131, 4], [-3, -171], [339, -34], [143, 16], [140, 169], [89, -61], [126, 6], [-16, 77], [-190, 16], [-81, -42], [-92, 69], [11, 123], [-179, -24], [-264, 49], [-89, 178], [-288, 153], [-142, 42], [-93, 98], [37, 171], [202, -8], [242, 26], [178, 78], [99, 85], [45, 116], [105, 127], [92, 41], [308, 79], [255, 155], [105, -13], [275, 28], [118, 41], [169, 128], [457, -78], [34, -73], [356, 14], [212, -35], [-46, -80], [167, -20], [87, -52], [214, -3], [126, 39], [163, -8], [155, -62], [336, -64], [281, 8], [136, -64], [462, 47], [441, -177], [86, 5], [0, -419], [0, -968], [0, -1439], [0, -551], [0, -31], [237, -46], [67, 56], [144, 7], [-29, -97], [114, -66], [19, -50], [237, -192], [19, -123], [241, 129], [3, 75], [175, 96], [57, 25], [105, -85], [-1, -79], [127, -79], [35, -60], [222, -196], [48, -101], [187, -293], [75, -111], [-18, -63], [245, -171], [224, -103], [-11, -130], [42, -177], [-87, -132], [-72, -53], [-64, 10], [-35, 144], [49, 43], [-6, 146], [-74, 100], [-126, -40], [-50, -138], [-59, 88], [60, 81], [-7, 142], [-84, 66], [21, 52], [-117, 59], [-38, 58], [-135, 66], [23, 61], [-59, 105], [20, 36], [97, -54], [-59, 53], [-36, 14], [2, 43], [9, 11], [4, 5], [-27, -31], [-22, -15], [-29, 54], [-86, 93], [-70, 55], [-49, 7], [-50, 105], [-1, 113], [-2, 0], [-51, 1], [-41, 134], [-8, 4], [-3, -140], [60, -129], [-82, -42], [-83, -3], [-150, -68], [-135, 28], [-201, 153], [-64, 86], [-275, 135], [-69, 68], [18, 112], [-160, -74], [-129, 14], [-169, 83], [-231, 45], [-302, -33], [-85, 53], [-249, 70], [-160, 103], [-95, 27], [-74, 79], [-101, 9], [-134, -38], [-74, 38], [-137, -75], [0, -22], [0, -61], [-2, -15], [48, 32], [114, -47], [-83, -56], [-28, -116], [-53, -9], [-206, -5], [-47, -87], [-228, -89], [-63, -79], [-225, 17], [78, 143], [-52, 45], [104, 162], [83, 209], [154, 91], [80, -45], [237, -26], [-239, 113], [193, 120], [-96, 2], [-79, -90], [-140, 15], [-88, -32], [-119, -66], [-193, -184], [-86, -124], [-6, -92], [-80, -81], [-85, -16], [-72, -78], [-88, -33], [10, -99], [85, 0], [90, -80], [13, 1], [-150, -91], [-48, -121], [-291, -175], [-87, -90], [-111, -27], [-34, -115], [-197, -144], [-144, -76], [-118, -27], [32, -72], [-74, -111], [-192, -38], [-53, -88], [-18, 71], [-166, -80], [-42, -50], [-226, -41], [-101, -87], [-144, -63], [-108, -1], [37, 85], [143, 188], [104, 71], [164, 26], [76, -28], [97, 144], [123, 96], [117, 46], [100, 76], [0, -3]], [[11057, 13928], [70, -122], [-63, -155], [-143, 92], [46, 57], [7, 109], [83, 19]], [[5938, 14674], [218, -64], [-89, -199], [-131, -19], [-146, -166], [-17, 68], [-128, 13], [-53, 109], [28, 81], [144, 49], [67, 92], [107, 36]], [[6159, 14829], [81, -33], [-27, -64], [-163, -33], [-98, 52], [125, 99], [82, -21]], [[10251, 14758], [87, -35], [2, 0], [34, 11], [-12, -14], [76, -115], [8, -155], [-162, -131], [19, 138], [-57, 117], [-8, 136], [5, 34], [8, 14]], [[10171, 14213], [-73, 30], [-8, 103], [-68, 93], [86, 68], [107, -98], [57, -231], [-11, -140], [0, -31], [-105, 157], [15, 49]], [[10785, 14069], [72, -86], [-65, -31], [-78, 73], [71, 44]], [[10669, 14241], [86, -82], [-95, -28], [9, 110]], [[10446, 14218], [-40, -230], [-55, 54], [40, 99], [-69, 69], [42, 76], [82, -68]], [[10442, 14346], [210, -62], [12, -96], [-63, -79], [-105, -4], [-54, 241]], [[10023, 14692], [-23, -21], [105, 48], [86, -26], [-61, -99], [-156, 82], [154, -109], [72, 20], [21, -100], [-169, 40], [-65, -74], [-109, 146], [-10, 15], [-9, 0], [-6, 0], [15, 61], [76, -60], [1, 2], [-92, 86], [14, 44], [125, 32], [31, -87]], [[3339, 16510], [73, -43], [44, -81], [-210, 44], [93, 80]], [[3431, 16595], [122, -52], [-134, -80], [-110, 88], [122, 44]], [[2941, 15562], [110, -50], [-10, -86], [-109, -112], [-267, 118], [5, 60], [112, 13], [159, 57]], [[3229, 15743], [57, -39], [98, -15], [-105, -176], [-114, 74], [51, 78], [13, 78]], [[1660, 16785], [160, -80], [117, 50], [215, -124], [57, -64], [-64, -57], [-299, 156], [-132, -54], [-97, 65], [43, 108]], [[10507, 14076], [100, -11], [48, -119], [116, -80], [25, -143], [78, -41], [15, -162], [-66, -35], [-63, 136], [-163, 62], [15, 193], [-33, 130], [-72, 70]], [[25965, 60], [-16, 81], [-2, 36], [-9, 11], [-3, 29], [19, 14], [13, 36], [33, -9], [13, -2], [15, 2], [17, -2], [42, 1], [12, -2], [22, 2], [21, -1], [8, -3], [23, -3], [17, -1], [7, -8], [1, -4], [17, 7], [10, 3], [38, -13], [18, -14], [19, -8], [8, -29], [-6, -27], [-18, -13], [-14, -38], [-12, -21], [-14, -11], [-26, -1], [-11, -4], [-32, -2], [-31, 6], [-26, 1], [-20, -3], [-37, 2], [-13, 8], [-23, -17], [-2, 0], [-28, 0], [-30, -3]]], "objects": { "states": { "type": "GeometryCollection", "geometries": [{ "arcs": [[0, 1, 2, 3]], "type": "Polygon", "id": 53 }, { "arcs": [[4, 5, 6, 7, 8, 9]], "type": "Polygon", "id": 30 }, { "arcs": [[-9, 10, 11, 12, 13, -2, 14]], "type": "Polygon", "id": 16 }, { "arcs": [[15, 16, 17, -6, 18]], "type": "Polygon", "id": 38 }, { "arcs": [[19, 20, 21, 22, 23, -17, 24]], "type": "Polygon", "id": 27 }, { "arcs": [[25, 26, 27]], "type": "Polygon", "id": 23 }, { "arcs": [[[28, 29, 30]], [[31, 32, 33, 34]], [[35]]], "type": "MultiPolygon", "id": 26 }, { "arcs": [[-31, 37, 38, 39, -21, 40, -29]], "type": "Polygon", "id": 55 }, { "arcs": [[-3, -14, 41, 42, 43]], "type": "Polygon", "id": 41 }, { "arcs": [[-18, -24, -23, 44, 45, 46, -7]], "type": "Polygon", "id": 46 }, { "arcs": [[-27, 47, 48, 49, 50]], "type": "Polygon", "id": 33 }, { "arcs": [[51, -50, 52, 53, 54]], "type": "Polygon", "id": 50 }, { "arcs": [[[-54, 55, 56, 57, 58, 59, 60]], [[61]]], "type": "MultiPolygon", "id": 36 }, { "arcs": [[-8, -47, 62, 63, 64, -11]], "type": "Polygon", "id": 56 }, { "arcs": [[-22, -40, 65, 66, 67, 68, -45]], "type": "Polygon", "id": 19 }, { "arcs": [[-63, -46, -69, 69, 70, 71, 72]], "type": "Polygon", "id": 31 }, { "arcs": [[73, 74, 75, 76, 77, 78, -56, -53, -49, 79]], "type": "Polygon", "id": 25 }, { "arcs": [[-39, 80, 81, 82, 83, -67, -66]], "type": "Polygon", "id": 17 }, { "arcs": [[-60, 84, 85, 86, 87, 88, 89, 90, 91]], "type": "Polygon", "id": 42 }, { "arcs": [[-79, 92, 93, -57]], "type": "Polygon", "id": 9 }, { "arcs": [[94, -93, -78]], "type": "Polygon", "id": 44 }, { "arcs": [[-43, 96, 97, 98]], "type": "Polygon", "id": 6 }, { "arcs": [[-65, 99, 100, 101, -12]], "type": "Polygon", "id": 49 }, { "arcs": [[-42, -13, -102, 102, -97]], "type": "Polygon", "id": 32 }, { "arcs": [[-91, 103, 104, 105, -33, 106]], "type": "Polygon", "id": 39 }, { "arcs": [[-34, -106, 107, -82, 108]], "type": "Polygon", "id": 18 }, { "arcs": [[-59, 109, -85]], "type": "Polygon", "id": 34 }, { "arcs": [[-64, -73, 110, 111, 112, -100]], "type": "Polygon", "id": 8 }, { "arcs": [[-90, 113, 114, 115, 116, -104]], "type": "Polygon", "id": 54 }, { "arcs": [[-84, 117, 118, 119, 120, 121, 122, 123, -70, -68]], "type": "Polygon", "id": 29 }, { "arcs": [[-72, -71, -124, 124, -111]], "type": "Polygon", "id": 20 }, { "arcs": [[125, -88, -87, 126, 127]], "type": "Polygon", "id": 10 }, { "arcs": [[[-89, -126, -128, 128, 129, 130, 131, 132, -114]], [[133, 134]], [[135]]], "type": "MultiPolygon", "id": 24 }, { "arcs": [[[-115, -133, 136, 137, 138, 139, 140, 141, 142, 143, 144, -116]], [[145, -130, 146]], [[147, 148, 149]]], "type": "MultiPolygon", "id": 51 }, { "arcs": [[-105, -117, -145, 150, -118, -83, -108]], "type": "Polygon", "id": 21 }, { "arcs": [[151, -137, -132]], "type": "Polygon", "id": 11 }, { "arcs": [[152, 153, -98, -103, -101]], "type": "Polygon", "id": 4 }, { "arcs": [[-125, -123, 154, 155, 156, -112]], "type": "Polygon", "id": 40 }, { "arcs": [[-113, -157, 157, 158, -153]], "type": "Polygon", "id": 35 }, { "arcs": [[-151, -144, 159, 160, 161, 162, 163, -121, 164, -119]], "type": "Polygon", "id": 47 }, { "arcs": [[[-143, 165, 166, 167, 168, -160]], [[169, -139, 170]], [[173]]], "type": "MultiPolygon", "id": 37 }, { "arcs": [[[-156, 174, 175, 176, -158]], [[177]], [[178]], [[179, 180]], [[181, 182]]], "type": "MultiPolygon", "id": 48 }, { "arcs": [[-122, -164, 183, 184, -175, -155]], "type": "Polygon", "id": 5 }, { "arcs": [[-168, -167, 185, 186]], "type": "Polygon", "id": 45 }, { "arcs": [[187, -162, 188, 189, 190, 191]], "type": "Polygon", "id": 1 }, { "arcs": [[-187, 192, 193, 194, -189, -161, -169]], "type": "Polygon", "id": 13 }, { "arcs": [[-163, -188, -192, 196, 197, -184]], "type": "Polygon", "id": 28 }, { "arcs": [[[-176, -185, -198, 198]], [[199]]], "type": "MultiPolygon", "id": 22 }, { "arcs": [[[-194, 200, 201, 202, 203, -190, -195]], [[204]], [[206]]], "type": "MultiPolygon", "id": 12 }, { "arcs": [[[208]], [[209]], [[210]], [[211]]], "type": "MultiPolygon", "id": 15 }, { "arcs": [[[212]], [[213]], [[214]], [[215]], [[216]], [[217]], [[218]], [[219]], [[220]], [[221]], [[222]], [[223]], [[224]], [[225]], [[226]], [[227]], [[228]], [[229]], [[230]], [[231]]], "type": "MultiPolygon", "id": 2 }, { "arcs": [[232]], "type": "Polygon", "id": 72 }, { "type": null, "id": 78 }] } } };






    $(document).ready(function () {
        $('.modal').modal();

        let x = Array.from($(".materialize-textarea.textarea-cause"));
        setInterval(function () {

            let x = Array.from($(".materialize-textarea.textarea-cause"));
            if (x !== undefined && x.length > 0) {
                for (let i = 0; i < x.length; i++) {
                    if (x[i].value == "Not open yet") {
                        $("#" + (x[i].id)).prop('disabled', true)
                    }
                }

                x = Array.from($(".materialize-textarea.textarea-effect"));

                for (let i = 0; i < x.length; i++) {
                    if (x[i].value == "Not open yet") {
                        $("#" + (x[i].id)).prop('disabled', true)
                    }
                }
            }
        }, 250);
    });
});

Template.gaMeDashboard.onCreated(function () {

    let inst = this;
    this.finishedTouring = new ReactiveVar(false);
    this.notifyFinish = new ReactiveVar(false);

    // all exp data
    this.allMyExperiments = new ReactiveVar([]);
    this.myOngoingExp = new ReactiveVar([]);
    this.participation = new ReactiveVar();
    this.myUnderReviewExp = new ReactiveVar([]);
    this.myReadyToRunExp = new ReactiveVar([]);
    this.myIncompeleteExp = new ReactiveVar([]);
    this.myCompletedExp = new ReactiveVar([]);
    this.myParticipateExp = new ReactiveVar(undefined);
    this.participateExpUnderReview = new ReactiveVar(undefined);
    this.exp = new ReactiveVar(undefined);
    this.isLoaded = new ReactiveVar(false);
    this.currUser = new ReactiveVar();
    this.userId = new ReactiveVar();
    this.myCompleteParticipatingExps = new ReactiveVar([]);

    Meteor.call('galileo.profile.isAdmin', function (err, res) {
        if (window.location.pathname.split("/")[4] !== undefined && window.location.pathname.split("/")[4].length > 0 && res) {
            inst.userId.set(window.location.pathname.split("/")[4]);
        } else {
            inst.userId.set(Meteor.userId());
        }

        Meteor.call("galileo.experiments.getParticipatingExpByUserComplete", inst.userId.get(), function (err, myCompleteParticipatingExps) {
            inst.myCompleteParticipatingExps.set(myCompleteParticipatingExps);
        })

        // passing false as mendel id to fetch all experiment
        Meteor.call("galileo.experiments.getExperimentsByUser", inst.userId.get(), function (err, allMyExperiments) {
            //console.log("get result from getExperimentsByUser");
            inst.isLoaded.set(true);
            if (err) {
                throw err;
            }
            inst.allMyExperiments.set(allMyExperiments);

            let myOngoingExp = [],
                myUnderReviewExp = [],
                myIncompeleteExp = [],
                myCompletedExp = [];
            let myOngoingExpCounter = 0,
                myUnderReviewExpCounter = 0,
                myIncompeleteExpCounter = 0,
                myCompletedExpCounter = 0;

            allMyExperiments.forEach(function (exp_item) {
                if (exp_item.status === ExperimentStatus.CREATED) {
                    myIncompeleteExp.push(exp_item)
                } else if (exp_item.status == ExperimentStatus.FINISHED || exp_item.status == ExperimentStatus.ANALYSIS_REQUESTED ||
                    exp_item.status == ExperimentStatus.ANALYSIS_FINISHED) {
                    myCompletedExp.push(exp_item);
                }
            });

            inst.myIncompeleteExp.set(myIncompeleteExp);
            inst.myCompletedExp.set(myCompletedExp);
            $("title").html("Galileo | Dashboard");
        });

        Meteor.call("galileo.experiments.getMulExperimentWithParticipantData", inst.userId.get(), function (err, allMyOngoingExperiments) {
            //console.log("get result from getMulExperimentWithParticipantData" + JSON.stringify(allMyOngoingExperiments));
            inst.myOngoingExp.set(allMyOngoingExperiments);
        });

        Meteor.call("galileo.experiments.getExperimentsWithReviewData", inst.userId.get(), function (err, allMyUnderReviewExperiments) {
            // console.log("result from getMulExperimentWithReviewData " + JSON.stringify(allMyUnderReviewExperiments));
            if (err) {
                throw err;
            }
            inst.myUnderReviewExp.set(allMyUnderReviewExperiments);
        });

        Meteor.call("galileo.profile.getProfile", inst.userId.get(), function (err, result) {
            inst.currUser.set(result);
        })

        Meteor.call("galileo.experiments.getReadyToRunExperiment", inst.userId.get(), function (err, result) {
            // console.log("result from getReadyToRunExperiment " + JSON.stringify(result));
            if (err) {
                throw err;
            }
            inst.myReadyToRunExp.set(result);
        });

        Meteor.call("galileo.experiments.getParticipatingExpByUser", inst.userId.get(), function (err, resultExp) {
            if (err) {
                throw err;
            }
            // console.log("my participating exp in meteor call: " + JSON.stringify(resultExp));
            if (resultExp) {
                inst.myParticipateExp.set(resultExp);
                inst.participation.set(resultExp.pResult);
            }
        });

        Meteor.call("galileo.experiments.getParticipatingExpUnderReviewing", inst.userId.get(), function (err, resultExp) {
            if (err) {
                throw err;
            }
            // console.log("my participating exp in meteor call: " + JSON.stringify(resultExp));
            if (resultExp) {
                inst.participateExpUnderReview.set(resultExp);
            }
        });
        Meteor.call("galileo.tour.finishedTouring", function (err, finished) {
            if (finished) {

                inst.finishedTouring.set(true);

                Meteor.call("galileo.tour.hasNotifiedFinish", function (err, has) {
                    if (!has) {
                        inst.notifyFinish.set(true);
                        Meteor.call("galileo.tour.notifyFinish");
                    }
                });
            } else {
                inst.finishedTouring.set(false);
            }
        });
    });
});

Template.gaMeDashboard.helpers({
    isBristol: function () {
        let user_exp = Template.instance().myParticipateExp.get();
        if (user_exp == undefined) {
            user_exp = Template.instance().participateExpUnderReview.get();
            if (user_exp == undefined) {
                return false
            }
        }
        let expDesign = user_exp.design;
        if (expDesign.effect_measure.type === "Bristol") {
            return true;
        }
        else {
            return false;
        }
    },
    relatedStep: function () {
        let user_exp = Template.instance().myParticipateExp.get();
        if (user_exp == undefined) {
            user_exp = Template.instance().participateExpUnderReview.get();
            if (user_exp == undefined) {
                return "Measurement Scale (Bristol Stool) for steps"
            }
        }

        expDesign = user_exp.design
        let participantGroup = user_exp.pResult.group;

        let steps = [];
        if (participantGroup === 1) {
            expDesign.condition.experimental.steps.forEach(function (element) {
                steps.push(element.charAt(0).toUpperCase() + element.slice(1));
            });
        } else if (participantGroup === 0) {
            expDesign.condition.control.steps.forEach(function (element) {
                steps.push(element.charAt(0).toUpperCase() + element.slice(1));
            });
        }

        let num = -1;

        for (i = 0; i < steps.length; i++) {
            if (steps[i].includes("scale")) {
                num = i + 1;
            }
        }

        if (num != -1) {
            return "Measurement Scale (Bristol Stool) for step " + num;
        }
        else {
            return "Measurement Scale (Bristol Stool) for steps";
        }
    },
    userId: function () {
        return Template.instance().userId.get();
    },
    hasCompleteParticipationExps: function () {
        let list = Template.instance().myCompleteParticipatingExps.get();
        if (list) {
            return list.length > 0;
        }
    },
    myCompleteParticipatingExps: function () {
        return Template.instance().myCompleteParticipatingExps.get();
    },
    noData: function (cause_effect) {
        if (cause_effect === "Not recorded yet") {
            return true;
        } else {
            return false;
        }
    },
    isLoaded: function () {
        return Template.instance().isLoaded.get();
    },
    notifyFinish: function () {
        return Template.instance().notifyFinish.get();
    },
    finishedTouring: function () {
        return Template.instance().finishedTouring.get();
    },
    // helpers for dashboard exp status display
    hasOngoingExp: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        return (user_exp && user_exp.length > 0);
    },
    myOngoingExp: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        return (user_exp && user_exp.length > 0 && user_exp[0]);
    },
    hasUnderReviewExp: function () {
        let user_exp = Template.instance().myUnderReviewExp.get();
        return (user_exp && user_exp.length > 0);
    },
    hasReadyToRunExp: function () {
        let user_exp = Template.instance().myReadyToRunExp.get();
        return user_exp;
    },
    getReadyToRunExp: function () {
        let user_exp = Template.instance().myReadyToRunExp.get();
        let return_exp = [];
        user_exp.forEach(function (exp) {
            exp["joinLink"] = getJoinLink(exp._id);
            return_exp.push(exp);
        });
        return return_exp;
    },
    getCurrentNumPart: function (id) {
        let user_exp = Template.instance().myReadyToRunExp.get();
        let num = 0;
        if (user_exp == undefined) {
            return;
        }
        user_exp.forEach(function (exp) {
            if (exp._id === id) {
                num = exp.run_users.length;
            }
        });
        return num;
    },
    getNeededPart: function (id) {
        let user_exp = Template.instance().myReadyToRunExp.get();
        let result = 0;
        if (user_exp == undefined) {
            return;
        }
        user_exp.forEach(function (exp) {
            if (exp._id === id) {
                if (exp.min_participant_count === exp.run_users.length) {
                    return result;
                }
                result = exp.min_participant_count - exp.run_users.length;
            }
        });
        return result;
    },
    getInviteJoinUrl: function (id) {
        return getJoinLink(id);
    },
    isEnoughParticipants: function (id) {
        let user_exp = Template.instance().myReadyToRunExp.get();
        let result = undefined;
        if (user_exp == undefined) {
            return;
        }
        user_exp.forEach(function (exp) {
            if (exp._id === id) {
                if (exp.min_participant_count <= exp.run_users.length) {
                    result = true;
                } else {
                    result = false;
                }
            }
        });
        return result;
    },
    isOneJoin: function (id) {
        let user_exp = Template.instance().myReadyToRunExp.get();
        let result = undefined;
        if (user_exp == undefined) {
            return;
        }
        user_exp.forEach(function (exp) {
            if (exp._id === id) {
                if (exp.run_users.length === 0 || exp.run_users.length === 1) {
                    result = true;
                } else {
                    result = false;
                }
            }
        });
        return result;
    },
    isOneNeed: function (id) {
        let user_exp = Template.instance().myReadyToRunExp.get();
        let result = undefined;
        if (user_exp == undefined) {
            return;
        }
        user_exp.forEach(function (exp) {
            if (exp._id === id) {
                if (exp.min_participant_count - exp.run_users.length === 1) {
                    result = true;
                } else {
                    result = false;
                }
            }
        });
        return result;
    },
    hasIncompeleteExp: function () {
        let user_exp = Template.instance().myIncompeleteExp.get();
        return (user_exp && user_exp.length > 0);
    },
    hasCompeletedExp: function () {
        let user_exp = Template.instance().myCompletedExp.get();
        return (user_exp && user_exp.length > 0);
    },
    myCompletedExpShort: function () {
        let user_exp = Template.instance().myCompletedExp.get();
        let arr = [];
        for (var i = 0; i < 100 && i < user_exp.length; i++) {
            arr.push(user_exp[i]);
        }
        return arr;
    },
    myCompletedExp: function () {
        let user_exp = Template.instance().myCompletedExp.get();
        // console.log(user_exp)
        return user_exp;
    },
    numCompletedExp: function () {
        let user_exp = Template.instance().myCompletedExp.get();
        return user_exp.length;
    },
    waitToAnalysis: function (id) {
        let user_exp = Template.instance().myCompletedExp.get();
        if (user_exp == undefined) {
            return;
        }
        let result = false;
        user_exp.forEach(function (element) {
            if (element._id === id && element.status === 11) {
                result = true;
            }
        });
        return result;
    },
    hasRequestDataAnalysis: function (id) {
        let user_exp = Template.instance().myCompletedExp.get();
        if (user_exp == undefined) {
            return;
        }
        let result = false;
        user_exp.forEach(function (element) {
            if (element._id === id && element.status === 12) {
                result = true;
            }
        });
        return result;
    },
    analysisFinished: function (id) {
        let user_exp = Template.instance().myCompletedExp.get();
        if (user_exp == undefined) {
            return;
        }
        let result = false;
        user_exp.forEach(function (element) {
            if (element._id === id && element.status === 13) {
                result = true;
            }
        });
        return result;
    },
    isPreparingToStartExp: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        if (user_exp == undefined || user_exp[0] == undefined) {
            return;
        }
        return user_exp[0].status === ExperimentStatus.PREPARING_TO_START;
    },
    getStartDate: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        if (user_exp == undefined || user_exp[0] == undefined) {
            return;
        }
        let start = user_exp[0].start_date_time.toString().split(" ").splice(0, 4).join('-');
        return start;
    },
    totalOngoingExp: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        return user_exp.length;
    },
    getOngoingExperimentCurrentDay: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        let currUser = Template.instance().currUser.get();

        if (currUser && user_exp && user_exp[0]) {
            let timeZoneOffset = currUser.timezone + parseInt(currUser.isDst);
            let nowInGMT = new Time(new Date()).addHour(timeZoneOffset);

            let ts = new TimeSpan(user_exp[0].start_date_time, nowInGMT);
            return Math.floor(ts.getDays()) + 1;
        }
    },
    getOngoingExperimentTotalDay: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        let duration = user_exp[0].duration;
        return duration;
    },
    ongoingExpCause: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        let cause = [];
        user_exp.forEach(function (element) {
            cause.push(element.design.cause);
        });
        return cause;
    },
    ongoingExpEffect: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        let effect = [];
        user_exp.forEach(function (element) {
            effect.push(element.design.effect);
        });
        return effect;
    },
    ongoingExpId: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        if (user_exp == undefined || user_exp[0] == undefined) {
            return;
        }

        localStorage.setItem("galileo_ongoingexp_id", user_exp[0]._id);
        return user_exp[0]._id;
    },
    ongoingExpInfo: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        let exps = [];
        user_exp.forEach(function (element) {
            exps.push(element);
        });
        return exps;
    },
    ongoingExpTitle: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        if (user_exp == undefined || user_exp[0] == undefined) {
            return;
        }
        return "Does " + user_exp[0].design.cause + " " + "affect" + " " + user_exp[0].design.effect + " ?";
    },
    totalParticipants: function () {
        let user_exp = Template.instance().myOngoingExp.get();
        return user_exp[0].run_users.length;
    },
    allParticipantsReceivedCauseReminder: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_cause_data[currentDay - 1].status != 0) {
                count++;
            }
        }
        if (count === participants.length) {
            return true;
        } else {
            return false;
        }
    },
    allParticipantsReceivedEffectReminder: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_effect_data[currentDay - 1].status != 0) {
                count++;
            }
        }
        if (count === participants.length) {
            return true;
        } else {
            return false;
        }
    },
    participantsNotReceivedCauseReminder: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_cause_data[currentDay - 1].status === 0) {
                count++;
            }
        }
        return count;
    },
    receivedAndRepliedCause: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_cause_data[currentDay - 1].status === 1 && participants[i].all_cause_data[currentDay - 1].value === undefined) {
                count++;
            }
        }
        return count == 0;
    },
    receivedCauseReminder: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_cause_data[currentDay - 1].status === 0) {
                count++;
            }
        }
        return participants.length - count;
    },
    receivedButNotRepliedCause: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_cause_data[currentDay - 1].status === 1 && participants[i].all_cause_data[currentDay - 1].value === undefined) {
                count++;
            }
        }
        return count;
    },
    participantsNotReceivedEffectReminder: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_effect_data[currentDay - 1].status === 0) {
                count++;
            }
        }
        return count;
    },
    receivedAndRepliedEffect: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_effect_data[currentDay - 1].status === 1 && participants[i].all_effect_data[currentDay - 1].value === undefined) {
                count++;
            }
        }
        return count === 0;
    },
    receivedEffectReminder: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_effect_data[currentDay - 1].status === 0) {
                count++;
            }
        }
        return participants.length - count;
    },
    receivedButNotRepliedEffect: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_effect_data[currentDay - 1].status === 1 && participants[i].all_effect_data[currentDay - 1].value === undefined) {
                count++;
            }
        }
        return count;
    },
    allParticipantsReceivedEitherReminder: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let cause_count = 0;
        let effect_count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_cause_data[currentDay - 1].status != 0) {
                cause_count++;
            }
            if (participants[i].all_effect_data[currentDay - 1].status != 0) {
                effect_count++;
            }
        }
        if (cause_count === participants.length || effect_count === participants.length) {
            return true;
        } else {
            return false;
        }
    },
    allParticipantsRepliedCause: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let partNotReply = [];
        for (let i = 0; i < participants.length; i++) {
            let hasCause = participants[i].all_cause_data[currentDay - 1].status;
            if (hasCause === 0 || !participants[i].all_cause_data[currentDay - 1].value) {
                partNotReply.push(hasCause);
            }
        }
        return partNotReply.length === 0;
    },
    allParticipantsRepliedEffect: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let partNotReply = [];
        for (let i = 0; i < participants.length; i++) {
            let hasEffect = participants[i].all_effect_data[currentDay - 1].status;
            if (hasEffect === 0 || !participants[i].all_effect_data[currentDay - 1].value) {
                partNotReply.push(hasEffect);
            }
        }
        return partNotReply.length === 0;
    },
    participantsNotRepliedCause: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let partNotReply = [];
        for (let i = 0; i < participants.length; i++) {
            let hasCause = participants[i].all_cause_data[currentDay - 1].status;
            if (hasCause == 1) {
                partNotReply.push(hasCause);
            }
        }
        return partNotReply.length;
    },
    participantsNotRepliedEffect: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let partNotReply = [];
        for (let i = 0; i < participants.length; i++) {
            let hasEffect = participants[i].all_effect_data[currentDay - 1].status;
            if (hasEffect == 1) {
                partNotReply.push(hasEffect);
            }
        }
        return partNotReply.length;
    },
    isOneRepliedCause: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_cause_data[currentDay - 1].status === 0) {
                count++;
            }
        }
        let data = participants.length - count;
        if (data == 1 || data == 0) {
            return true;
        }
        else {
            return false;
        }
    },
    isOneRepliedEffect: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        let participants = exp[0].participantInfoResults;
        let count = 0;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_effect_data[currentDay - 1].status === 0) {
                count++;
            }
        }
        let data = participants.length - count;
        if (data == 1 || data == 0) {
            return true;
        }
        else {
            return false;
        }
    },
    getAllPercentage: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        if (exp == undefined || exp[0] == undefined) {
            return;
        }
        let participants = exp[0].participantInfoResults;
        let partReceived = [];
        let partReply = [];
        for (let i = 0; i < participants.length; i++) {
            let hasCause = participants[i].all_cause_data[currentDay - 1].status;
            if (hasCause >= 2) {
                partReply.push(hasCause);
                partReceived.push(hasCause);
            } else if (hasCause == 1) {
                partReceived.push(hasCause);
            }
            let hasEffect = participants[i].all_effect_data[currentDay - 1].status;
            if (hasEffect >= 2) {
                partReply.push(hasEffect);
                partReceived.push(hasEffect);
            } else if (hasEffect == 1) {
                partReceived.push(hasEffect);
            }
        }
        let percentage = Math.round((partReply.length / partReceived.length) * 100);
        return percentage;
    },
    notAllReplied: function (currentDay) {
        let exp = Template.instance().myOngoingExp.get();
        if (exp == undefined || exp[0] == undefined) {
            return;
        }
        let count = 0;
        let participants = exp[0].participantInfoResults;
        for (let i = 0; i < participants.length; i++) {
            if (participants[i].all_cause_data[currentDay - 1].status == 1 && participants[i].all_cause_data[currentDay - 1].value == undefined) {
                count++;
            } else if (participants[i].all_effect_data[currentDay - 1].status == 1 && participants[i].all_effect_data[currentDay - 1].value == undefined) {
                count++;
            }
        }
        return count != 0;
    },
    hasNewClarification: function () {
        let exp = Template.instance().myOngoingExp.get();
        if (exp == undefined || exp[0] == undefined) {
            return;
        }
        let clarification = exp[0].clarification;
        let result = [];
        //console.log("clarifications are: " + JSON.stringify(clarification));
        clarification.forEach(function (c) {
            if (c.resolved === false) {
                result.push(c);
            }
        })
        console.log(result)
        return result.length > 0;
    },
    totalIncompletedExp: function () {
        let user_exp = Template.instance().myIncompeleteExp.get();
        return user_exp.length;
    },
    onlyOneIncompletedExp: function () {
        let user_exp = Template.instance().myIncompeleteExp.get();
        if (user_exp.length === 0 || user_exp.length === 1) {
            return true;
        } else {
            return false;
        }
    },
    incompleteExpInfo: function () {
        let user_exp = Template.instance().myIncompeleteExp.get();
        let exps = [];
        user_exp.forEach(function (element) {
            exps.push(element);
        });
        return exps;
    },
    totalUnderReviewExp: function () {
        let user_exp = Template.instance().myUnderReviewExp.get();
        return user_exp.length;
    },
    onlyOneUnderReviewExp: function () {
        let user_exp = Template.instance().myUnderReviewExp.get();
        if (user_exp.length === 0 || user_exp.length === 1) {
            return true;
        } else {
            return false;
        }
    },
    isThreeUnderReviewExps: function () {
        let user_exp = Template.instance().myUnderReviewExp.get();
        return user_exp.length >= 3;
    },
    getUnderReviewExp: function () {
        let user_exp = Template.instance().myUnderReviewExp.get();
        let result = [];
        if (user_exp == undefined) {
            return;
        }
        if (user_exp.length >= 3) {
            user_exp.forEach(function (e) {
                result.push(e);
                if (result.length === 3) {
                    return result;
                }
            })

        }
        return user_exp;
    },
    hasReviewComment: function () {
        let user_exp = Template.instance().myUnderReviewExp.get();
        return user_exp[0].length > 0;
    },
    listOfReviewComments: function (exp_id) {
        let exps = Template.instance().myUnderReviewExp.get();

        let index = 0;
        for (i = 0; i < exps.length; i++) {
            if (exp_id === exps[i]._id) {
                index = i;
            }
        }

        user_exp = exps[index];

        let length = user_exp.expFeedbacksData.length;
        let twoReview = [];
        let review1 = {};

        review1.content = user_exp.expFeedbacksData[0].content;
        review1.username = user_exp.expFeedbacksData[0].username;
        twoReview.push(review1);
        if (length >= 2) {
            let review2 = {};

            review2.content = user_exp.expFeedbacksData[length - 1].content;
            review2.username = user_exp.expFeedbacksData[length - 1].username;

            twoReview.push(review2);
        }
        return twoReview;
    },

    // Helper functions for the participanting experiment of current user
    hasParticipatingExp: function () {
        return Template.instance().myParticipateExp.get() || Template.instance().participateExpUnderReview.get();
    },
    hasStarted: function () {
        let exp = Template.instance().myParticipateExp.get();
        if (exp == undefined) {
            return;
        }
        console.log("current exp is " + exp._id + " status: " + exp.status);
        return exp.status === ExperimentStatus.STARTED || exp.status === ExperimentStatus.FINISHED;
    },
    getStart: function () {
        let exp = Template.instance().myParticipateExp.get();
        if (exp == undefined) {
            return;
        }
        let start = exp.start_date_time.toString().split(" ").splice(0, 4).join('-');
        return start;
    },
    notStart: function () {
        let exp = Template.instance().myParticipateExp.get();
        if (exp == undefined) {
            return;
        }
        return exp.status === ExperimentStatus.PREPARING_TO_START;
    },
    requestedAnalysis: function (exp) {
        if (exp == undefined) {
            return;
        }
        return exp.status === ExperimentStatus.ANALYSIS_REQUESTED;
    },
    getAnalysis: function (exp) {
        if (exp == undefined) {
            return;
        }
        return exp.status === ExperimentStatus.ANALYSIS_FINISHED;
    },
    getExpAnalysis: function () {
        return Template.instance().myParticipateExp.get();
    },
    isControl: function () {
        let part = Template.instance().participation.get();
        let result = false;
        if (part === undefined) {
            return;
        }
        if (part.group === 0) {
            result = true;
        }
        return result;
    },
    getExpTitleForParticipantCompleted: function (user_exp) {
        if (user_exp == undefined) {
            return;
        }
        let expDesign = user_exp.design;
        let title = "Does " + expDesign.cause + " affect " + expDesign.effect + " ?";
        return title;
    },
    getExpTitleForParticipant: function () {
        let user_exp = Template.instance().myParticipateExp.get();
        if (user_exp == undefined) {
            return;
        }
        let expDesign = user_exp.design;
        let title = "Does " + expDesign.cause + " affect " + expDesign.effect + " ?";
        return title;
    },
    getExpId: function () {
        let exp = Template.instance().myParticipateExp.get();
        if (exp == undefined) {
            return;
        }
        return exp._id;
    },
    oneStepPart: function (exp) {
        let expDesign = exp.design;
        let participantGroup = exp.participantInfoResults.group;
        let steps = [];
        if (participantGroup === 1) {
            expDesign.condition.experimental.steps.forEach(function (element) {
                steps.push(element);
            });
        } else if (participantGroup === 0) {
            expDesign.condition.control.steps.forEach(function (element) {
                steps.push(element);
            });
        }
        return steps.length === 1;
    },
    oneStep: function () {
        let expDesign = Template.instance().myParticipateExp.get().design;
        let participantGroup = Template.instance().myParticipateExp.get().participantInfoResults.group;
        let steps = [];
        if (participantGroup === 1) {
            expDesign.condition.experimental.steps.forEach(function (element) {
                steps.push(element);
            });
        } else if (participantGroup === 0) {
            expDesign.condition.control.steps.forEach(function (element) {
                steps.push(element);
            });
        }
        return steps.length === 1;
    },
    getStepsPart: function (exp) {
        let expDesign = exp.design;
        let participantGroup = exp.participantInfoResults.group;
        let steps = [];
        if (participantGroup === 1) {
            expDesign.condition.experimental.steps.forEach(function (element) {
                steps.push(element.charAt(0).toUpperCase() + element.slice(1));
            });
        } else if (participantGroup === 0) {
            expDesign.condition.control.steps.forEach(function (element) {
                steps.push(element.charAt(0).toUpperCase() + element.slice(1));
            });
        }
        return steps;
    },
    getSteps: function () {
        let expDesign = Template.instance().myParticipateExp.get().design;
        let participantGroup = Template.instance().myParticipateExp.get().participantInfoResults.group;
        let steps = [];
        if (participantGroup === 1) {
            expDesign.condition.experimental.steps.forEach(function (element) {
                steps.push(element.charAt(0).toUpperCase() + element.slice(1));
            });
        } else if (participantGroup === 0) {
            expDesign.condition.control.steps.forEach(function (element) {
                steps.push(element.charAt(0).toUpperCase() + element.slice(1));
            });
        }
        return steps;
    },
    getCauseTime: function () {
        let expDesign = Template.instance().myParticipateExp.get();
        if (expDesign) {
            expDesign = expDesign.design;
            return expDesign.cause_measure.time + ":00";
        }
    },
    getEffectTime: function () {
        let expDesign = Template.instance().myParticipateExp.get();
        if (expDesign) {
            expDesign = expDesign.design;
            return expDesign.effect_measure.time + ":00";
        }
    },
    getMeasurement: function () {
        let expDesign = Template.instance().myParticipateExp.get().design;
        let measure = [];

        let cause_measure = expDesign.cause_measure;
        cause_measure.measure = expDesign.cause;
        cause_measure.cOrE = "Cause";

        let effect_measure = expDesign.effect_measure;
        effect_measure.measure = expDesign.effect;
        effect_measure.cOrE = "Effect"

        measure.push(cause_measure);
        measure.push(effect_measure);
        return measure;
    },
    getMeasurementPart: function (exp) {
        let expDesign = exp.design;
        let measure = [];

        let cause_measure = expDesign.cause_measure;
        cause_measure.measure = expDesign.cause;
        cause_measure.cOrE = "Cause";

        let effect_measure = expDesign.effect_measure;
        effect_measure.measure = expDesign.effect;
        effect_measure.cOrE = "Effect"

        measure.push(cause_measure);
        measure.push(effect_measure);
        return measure;
    },
    getCurrentDayForParticipant: function () {
        let user_exp = Template.instance().participation.get();

        let nowInGMT = Time.getNowInGmt();

        let ts = new TimeSpan(user_exp.user_startDate_inGmt, nowInGMT);
        return Math.floor(ts.getDays()) + 1;
    },
    getCause: function () {
        let cause = "";
        if (Template.instance().myParticipateExp.get()) {
            let string = Template.instance().myParticipateExp.get().design.cause;
            cause = string.charAt(0).toUpperCase() + string.slice(1)
        }
        return cause;
    },
    getEffect: function () {
        let effect = "";
        if (Template.instance().myParticipateExp.get()) {
            let string = Template.instance().myParticipateExp.get().design.effect;
            effect = string.charAt(0).toUpperCase() + string.slice(1);
        }
        return effect;
    },
    getCauseUnit: function () {
        let cause = "";
        if (Template.instance().myParticipateExp.get()) {
            let string = Template.instance().myParticipateExp.get().design.cause;
            cause = string.charAt(0).toUpperCase() + string.slice(1);
        }
        return cause + " (" + Template.instance().myParticipateExp.get().design.cause_measure.type + ")";
    },
    getEffectUnit: function () {
        let effect = "";
        if (Template.instance().myParticipateExp.get()) {
            let string = Template.instance().myParticipateExp.get().design.effect;
            effect = string.charAt(0).toUpperCase() + string.slice(1);
        }
        return effect + " (" + Template.instance().myParticipateExp.get().design.effect_measure.type + ")";
    },
    getDate: function () {
        return dateStr(new Date())
    },
    hasCauseOfToday: function (currentDay) {
        let user_exp = Template.instance().myParticipateExp.get();
        let participantCauseData = user_exp.participantInfoResults.all_cause_data;
        return participantCauseData[currentDay - 1].value;
    },
    hasEffectOfToday: function (currentDay) {
        let user_exp = Template.instance().myParticipateExp.get();
        let participantEffectData = user_exp.participantInfoResults.all_effect_data;
        return participantEffectData[currentDay - 1].value;
    },
    disableCause: function (currentDay) {
        let user_exp = Template.instance().myParticipateExp.get();
        if (user_exp === undefined) {
            return;
        }

        let participantCauseData = user_exp.participantInfoResults.all_cause_data;

        // Check if the time to remind cause and effect
        let date = new Date();
        let currentTime = date.getHours();
        let causeReminderTime = user_exp.design.cause_measure.time;
        if (causeReminderTime > currentTime && !participantCauseData[currentDay - 1].value) {
            return true;
        }

        return false;
    },
    disableEffect: function (currentDay) {
        let user_exp = Template.instance().myParticipateExp.get();
        if (user_exp === undefined) {
            return;
        }
        console.log(currentDay)
        console.log(user_exp.participantInfoResults.all_effect_data[currentDay - 1]);
        let participantEffectData = user_exp.participantInfoResults.all_effect_data;

        // Check if the time to remind cause and effect
        let date = new Date();
        let currentTime = date.getHours();
        let effectReminderTime = user_exp.design.effect_measure.time;
        if (effectReminderTime > currentTime && !participantEffectData[currentDay - 1].value) {
            return true;
        }

        return false;
    },
    getNumOfUnrecordedData: function (currentDay) {
        let user_exp = Template.instance().myParticipateExp.get();
        if (user_exp === undefined) {
            return;
        }

        let participantCauseData = user_exp.participantInfoResults.all_cause_data;
        let participantEffectData = user_exp.participantInfoResults.all_effect_data;

        // Check if the time to remind cause and effect
        let date = new Date();
        let currentTime = date.getHours();
        let causeReminderTime = user_exp.design.cause_measure.time;
        let effectReminderTime = user_exp.design.effect_measure.time;
        if (causeReminderTime <= currentTime && !participantCauseData[currentDay - 1].value) {
            return true;
        } else if (effectReminderTime <= currentTime && !participantEffectData[currentDay - 1].value) {
            return true;
        }

        return false;
    },
    causeType: function () {
        let exp = Template.instance().myParticipateExp.get();
        if (exp) {
            return exp.design.cause_measure.type;
        }
    },
    effectType: function () {
        let exp = Template.instance().myParticipateExp.get();
        if (exp) {
            return exp.design.effect_measure.type;
        }
    },
    isRunning: function () {
        let exp = Template.instance().myParticipateExp.get();
        if (exp == undefined) {
            return;
        }
        let status = exp.participantInfoResults.status;
        return status === 4;
    },
    isCompleted: function () {
        let exp = Template.instance().myParticipateExp.get();
        if (exp == undefined) {
            return;
        }
        let status = exp.participantInfoResults.status;
        return status === 5;
    },
    isCompletedPart: function (exp) {
        if (exp == undefined) {
            return;
        }
        let status = exp.status;
        return status === 11;
    },
    isMissingPastData: function (currentDay) {
        let exp = Template.instance().myParticipateExp.get();
        if (exp == undefined) {
            return;
        }
        let participantCauseData = exp.participantInfoResults.all_cause_data;
        let participantEffectData = exp.participantInfoResults.all_effect_data;
        for (let i = 0; i < currentDay - 1; i++) {
            if (!participantCauseData[i].value || !participantEffectData[i].value) {
                return true;
            }
        }
        return false;
    },
    slots: function () {
        let participation = Template.instance().participation.get();
        let nowInGMT = Time.getNowInGmt();
        if (participation == undefined) {
            return;
        }
        let ts = new TimeSpan(participation.user_startDate_inGmt, nowInGMT);
        let index = Math.floor(ts.getDays());


        let exp = Template.instance().myParticipateExp.get();
        if (exp == undefined) {
            return;
        }
        let temp = exp.start_date_time;
        let startDay = temp.toString().split(" ")[2];
        var d = new Date().toISOString();
        if (participation && participation.cause_data && exp) {
            let ts = new TimeSpan(participation.user_startDate_inGmt, participation.user_endDate_inGmt);
            let duration = Math.floor(ts.getDays());
            let slots = [];
            for (let j = 0; j < duration; j++) {
                let cause_rid = Math.floor(Math.random() * 1000000) + Math.floor(Math.random() * 1000000) + 1;
                let effect_rid = Math.floor(Math.random() * 1000000) + Math.floor(Math.random() * 1000000) + 1;
                let cause_data = participationData(participation, "cause", j);
                let effect_data = participationData(participation, "effect", j);

                // Check if the time to remind cause and effect
                let date = new Date();
                let currentTime = date.getHours();
                let causeReminderTime = exp.design.cause_measure.time;
                let effectReminderTime = exp.design.effect_measure.time;


                if (j <= index) {
                    let today_class = "";
                    if (j === index) {
                        today_class = "today-submit-data";
                    }
                    if (participation["cause_data"][j].value === undefined && today_class != "today-submit-data") {
                        cause_data = "Not recorded yet";
                    }
                    if (participation["effect_data"][j].value === undefined && today_class != "today-submit-data") {
                        effect_data = "Not recorded yet";
                    }
                    if (causeReminderTime <= currentTime && participation["cause_data"][j].value === undefined && today_class == "today-submit-data") {
                        cause_data = "Not recorded yet";
                    }
                    if (effectReminderTime <= currentTime && participation["effect_data"][j].value === undefined && today_class == "today-submit-data") {
                        effect_data = "Not recorded yet";
                    }

                    slots[j] = {
                        date: dateStr(new Time(participation.user_startDate_inGmt).addDay(j).getDate()),
                        cause: cause_data,
                        effect: effect_data,
                        cause_rid: cause_rid,
                        effect_rid: effect_rid,
                        index: j,
                        editable: true,
                        today: today_class
                    }
                } else {
                    slots[j] = {
                        date: dateStr(new Time(participation.user_startDate_inGmt).addDay(j).getDate()),
                        cause: cause_data,
                        effect: effect_data,
                        cause_rid: cause_rid,
                        effect_rid: effect_rid,
                        index: j,
                        editable: false,
                        today: ""
                    }
                }
            }
            initiateSelect();
            //console.log("Slots with rid: " + JSON.stringify(slots));
            return slots;
        }
    },
    isUnderReview: function () {
        let exp = Template.instance().participateExpUnderReview.get();
        if (exp === undefined) {
            return;
        }
        return exp.status !== 8;
    },
    hasExpUnderReview: function () {
        let exp = Template.instance().participateExpUnderReview.get();
        return exp;
    },
    steps: function () {
        let exp = Template.instance().participateExpUnderReview.get();
        if (exp) {
            let cond = exp.pResult.group ? "experimental" : "control";
            return exp["design"]["condition"][cond]["steps"];
        }
    },
    prepSteps: function () {
        let exp = Template.instance().participateExpUnderReview.get();
        if (exp) {
            let cond = exp.pResult.group ? "experimental" : "control";
            return exp["design"]["condition"][cond]["prep_steps"];
        }
    },
});



Template.gaMeDashboard.events({
    'click #stopParticipating': function () {
        showModal('#stop-participating-modal');
    },
    'click #bristol': function () {
        $("#image-modal").modal('open')
    },
    'click #discuss-myPart': function (event, instance) {
        let exp_id = event.target.attributes["expid"].value;
        let title = event.target.attributes["title"].value;

        $("#discussion-modal").attr('exp_id', exp_id);
        $("#title-discussion").text(title);

        $("#discussion-modal").modal('open');
    },
    'click .discuss-myCreate': function (event, instance) {
        let exp_id = event.target.attributes["expid"].value;
        let title = event.target.attributes["title"].value;

        $("#discussion-modal").attr('exp_id', exp_id);
        $("#title-discussion").text(title);

        $("#discussion-modal").modal('open');
    },
    'click .clarificationModal': function (event, instance) {
        showModal('#clarification-modal');
    },

    'click .clarificationCreatorModal': function (event, instance) {
        showModal('#creator-clarification-modal');
    },

    'click .view-details-btn': function () {
        showReminderStatsModal();
    },

    'click .send-cause-reminder-btn': function () {
        showSendReminderModal();
    },

    'click .send-effect-reminder-btn': function () {
        showSendReminderModal();
    },

    'click .send-thank-you': function (event) {
        let expId = event.target.dataset['id'];
        let cause = $(event.target).attr("cause");
        let effect = $(event.target).attr("effect");
        let modal = $('#send-thank-note-modal');
        modal.data('exp_id', expId);
        modal.data('cause', cause);
        modal.data('effect', effect);
        modal.modal({
            dismissible: true,
            ready: function () {
                modal.trigger('show');
            },
            complete: function () {

            },
        });
        modal.modal('open');
    },
    'click .request-analysis': function (event) {
        console.log("clicked button");
        let expId = $(event.target).attr("data-id");
        let modal = $('#request-analysis-modal');
        modal.data('exp_id', expId);
        var exp_title = $("#request-data-exp-title").html();
        $("#request-text-box").html("I want to request the data analysis for my experiment: <b>" + exp_title + "</b><br/><br/>");
        modal.modal({
            dismissible: true,
            ready: function () {
                modal.trigger('show');
            },
            complete: function () {

            },
        });
        modal.modal('open');
        // Meteor.call('galileo.notification.sendDataAnalysisRequest', expId);
        // $(event.target).prop('disabled', true);
        // Materialize.toast("You have submitted the request of data analysis.", 3000, "toast rounded");
    },
    'click .dismiss': function (event, instance) {
        let expId = event.target.dataset['id'];
        exps = Template.instance().myCompletedExp.get();
        let inst = Template.instance();

        Meteor.call('galileo.experiments.setSentThankYou', expId, function (err, result) {
            if (!err) {
                let index = 0;
                experiments = [];
                for (var i = 0; i < exps.length; i++) {
                    if (expId != exps[i]._id) {
                        experiments.push(exps[i])
                    }
                }
                inst.myCompletedExp.set(experiments);
            }
        });
    },
    'click #continueBtn': function (event) {
        let expId = $(event.target).attr("exp-id");
        let newURL = "/galileo/createdemo?expid=" + expId;
        window.open(newURL, "_blank");
    },
    'click .viewPastData': function (event) {
        // let expId = $(event.target).attr("exp-id");
        // $("#edit-data-modal-title").html("Participation Tracking Sheet for " + expId);
        $('#edit-data-modal').modal('open');
        // let newURL = "/galileo/me/experiment/" + expId + "/my_participation";
        // window.open(newURL, "_blank");
    },
    'click .viewPastDataPart': function (event) {
        let expId = $(event.target).attr("exp-id");
        $('#edit-data-modal-part-' + expId).modal('open');
    },
    'keyup #cause-data': function (event) {
        if ($(event.target).val().length > 0) {
            $("#causeBtn").show();
        } else {
            $("#causeBtn").hide();
        }
    },
    'keyup #effect-data': function (event) {
        if ($(event.target).val().length > 0) {
            $("#effectBtn").show();
        } else {
            $("#effectBtn").hide();
        }
    },
    'click #causeBtn': function (event) {
        let user_exp = Template.instance().myParticipateExp.get();
        let temp = user_exp.start_date_time;
        let startDay = temp.toString().split(" ")[2];
        var d = new Date().toISOString();
        let currentDay = $(event.target).attr("index") - 1;
        let causeData = $("#cause-data").val().trim();
        let expId = $(event.target).attr("exp-id");
        if (causeData.length > 0) {
            let userId = Template.instance().userId.get();
            Meteor.call('galileo.experiments.addCauseData', Template.instance().userId.get(), expId, currentDay, causeData);
            $(event.target).hide();
            $("#cause-data").prop('disabled');

            let rid = $("#edit-data-modal").children('div.modal-content').children('div.section-body').children('table.sheet-table').children()[currentDay + 1].children[2].children[0].attributes.rid.value;
            $("#editCauseData-" + rid).val(causeData)
            //$("#editCauseData-" + rid).prop('disabled', true);

            user_exp.participantInfoResults.all_cause_data[currentDay].value = causeData;
            Template.instance().myParticipateExp.set(user_exp);
            Materialize.toast("Great! You have submitted the cause data.", 3000, "toast rounded");

            $('#followup-modal-' + expId).data('isCause', true);
            $('#followup-modal-' + expId).data('day', currentDay);
            $("#followup-modal-" + expId).modal('open');
        }
    },
    'click #effectBtn': function (event) {
        let user_exp = Template.instance().myParticipateExp.get();
        let temp = user_exp.start_date_time;
        let startDay = temp.toString().split(" ")[2];
        var d = new Date().toISOString();
        let currentDay = $(event.target).attr("index") - 1;
        let effectData = $("#effect-data").val().trim();
        let expId = $(event.target).attr("exp-id");
        if (effectData.length > 0) {
            let userId = Template.instance().userId.get();
            Meteor.call('galileo.experiments.addEffectData', Template.instance().userId.get(), expId, currentDay, effectData);
            $(event.target).hide();
            $("#effect-data").prop('disabled');

            let rid = $("#edit-data-modal").children('div.modal-content').children('div.section-body').children('table.sheet-table').children()[currentDay + 1].children[4].children[0].attributes.rid.value;
            $("#editEffectData-" + rid).val(effectData)
            //$("#editEffectData-" + rid).prop('disabled', true);

            user_exp.participantInfoResults.all_effect_data[currentDay].value = effectData;
            Template.instance().myParticipateExp.set(user_exp);

            Materialize.toast("Great! You have submitted the effect data.", 3000, "toast rounded");

            $('#followup-modal-' + expId).data('isCause', false);
            $('#followup-modal-' + expId).data('day', currentDay);
            $("#followup-modal-" + expId).modal('open');
        }
    },
    "keyup .textarea-cause": function (event) {
        let textareaRID = $(event.target).attr("rid");
        if ($(event.target).val().length > 0) {
            $("#submitCauseBtn-" + textareaRID).show();
        } else {
            $("#submitCauseBtn-" + textareaRID).hide();
        }
    },
    "keyup .textarea-effect": function (event) {
        let textareaRID = $(event.target).attr("rid");
        if ($(event.target).val().length > 0) {
            $("#submitEffectBtn-" + textareaRID).show();
        } else {
            $("#submitEffectBtn-" + textareaRID).hide();
        }
    },
    "click .saveCauseChange": function (event) {
        let textareaRID = $(event.target).attr("rid");
        let optionIndex = $(event.target).attr("index");
        let expId = $(event.target).attr("exp-id");
        let feedbackContentID = "#editCauseData-" + textareaRID;
        let causeData = $(feedbackContentID).val().trim();
        let inst = Template.instance();

        if (causeData.length > 0) {
            let userId = Template.instance().userId.get();
            Meteor.call('galileo.experiments.addCauseData', Template.instance().userId.get(), expId, optionIndex, causeData);
            $("#submitCauseBtn-" + textareaRID).hide();
            //$("#editCauseData-" + textareaRID).prop('disabled', true);
            if ($("#submitCauseBtn-" + textareaRID).parent().hasClass("today-submit-data")) {
                $("#cause-data").val(causeData);
            }

            let user_exp = Template.instance().myParticipateExp.get();
            user_exp.participantInfoResults.all_cause_data[optionIndex].value = causeData;
            Template.instance().myParticipateExp.set(user_exp);
            Materialize.toast("Great! You have submitted the cause data.", 3000, "toast rounded");

            $('#followup-modal-' + expId).data('isCause', true);
            $('#followup-modal-' + expId).data('day', optionIndex);
            $("#followup-modal-" + expId).modal('open');

        } else {
            Materialize.toast("Please provide more data before submit", 3000, "toast rounded");
        }
    },
    "click .saveEffectChange": function (event) {
        let textareaRID = $(event.target).attr("rid");
        let optionIndex = $(event.target).attr("index");
        let expId = $(event.target).attr("exp-id");
        let feedbackContentID = "#editEffectData-" + textareaRID;
        let effectData = $(feedbackContentID).val().trim();
        let inst = Template.instance();

        if (effectData.length > 0) {
            let userId = Template.instance().userId.get();
            Meteor.call('galileo.experiments.addEffectData', Template.instance().userId.get(), expId, optionIndex, effectData);
            $("#submitEffectBtn-" + textareaRID).hide();
            //$("#editEffectData-" + textareaRID).prop('disabled', true);
            if ($("#submitEffectBtn-" + textareaRID).parent().hasClass("today-submit-data")) {
                $("#effect-data").val(effectData);
            }

            let user_exp = Template.instance().myParticipateExp.get();
            user_exp.participantInfoResults.all_effect_data[optionIndex].value = effectData;
            Template.instance().myParticipateExp.set(user_exp);

            Materialize.toast("Great! You have submitted the effect data.", 3000, "toast rounded");

            $('#followup-modal-' + expId).data('isCause', false);
            $('#followup-modal-' + expId).data('day', optionIndex);
            $("#followup-modal-" + expId).modal('open');

        } else {
            Materialize.toast("Please provide more data before submit", 3000, "toast rounded");
        }
    },
    "click #powerAnalysis": function () {
        showModal('#count-participant-modal');
    },
    "click #learnInvite": function () {
        showModal('#learn-invite-modal');
    },
    "click #copyJoinLinkBtn": function (event) {
        copyToClipboard("#inviteJoinLink");
        Materialize.toast('Copied!', 2000);
    },
    "click #joinUrl": function (event) {
        copyToClipboard("#inviteJoinLink");
        Materialize.toast('Copied!', 2000);
    },
    "click .review-datasheet": function () {
        let expId = $(event.target).attr("data-id");
        let newURL = "/galileo/me/experiment/" + expId + "/info";
        window.open(newURL, "_blank");
    },
    // "click #debug_python_button": function() {
    //     HTTP.post(getAPIURL("printHelloWorld"), {}, function(error, response) {
    //         if (error) {
    //             console.log("Error in calling server to return the output file name");
    //         } else {
    //             let filecontent = JSON.parse(response.content)["content"];
    //             console.log(filecontent);
    //             $("#debug_python_result").show();
    //             $("#debug_python_placeholder").html(filecontent);
    //         }
    //     });
    // },
    "click .debug_python_button": function (event) {
        let id = $(event.target).attr("exp-id");
        let post_data = {
            "exp_id": id
        }
        Meteor.call("galileo.experiments.analysis.printGreaterEffect", post_data, function (error, result) {
            results = result.split("$$$")
            $("#debug_python_result_" + id).show();
            $("#debug_python_placeholder_" + id).html(results[0]);
            $("#debug_python_placeholder_img_" + id).attr("src", results[1]);
        });

    },
    "click #openEmailTemplateBtn": function () {
        $("#share-email-join-modal").css("height", "auto");
        let modal = $('#share-email-join-modal');
        modal.modal({
            dismissible: true,
            ready: function () {
                modal.trigger('show');
            },
            complete: function () {

            },
        });

        modal.modal('open');
    },
});


function showReminderStatsModal() {
    showModal('#reminder-stats-modal');
}

function showSendReminderModal() {
    showModal('#send-reminder-modal');
}

function showModal(modalId) {
    let modal = $(modalId);
    modal.modal({
        dismissible: true,
        ready: function () {
            modal.trigger('show');
        },
        complete: function () {

        },
    });

    modal.modal('open');
}


function dateStr(date) {
    return monthStr(date.getMonth()) + ". " + date.getDate() + ", " + date.getFullYear();
}


function monthStr(month) {
    switch (month) {
        case 0:
            return "Jan";
        case 1:
            return "Feb";
        case 2:
            return "Mar";
        case 3:
            return "Apr";
        case 4:
            return "May";
        case 5:
            return "Jun";
        case 6:
            return "Jul";
        case 7:
            return "Aug";
        case 8:
            return "Sep";
        case 9:
            return "Oct";
        case 10:
            return "Nov";
        case 11:
            return "Dec";
    }
}

function participationData(participation, type, day) {
    let exp = Template.instance().myParticipateExp.get();
    if (exp) {
        let slot = participation[type + "_data"][day];
        let status = slot["status"];
        switch (status) {
            case ParticipationSlotStatus.PREPARING:
                return "Not open yet";
            case ParticipationSlotStatus.SENT:
                return "Not recorded yet";
            case ParticipationSlotStatus.COMPLETE:
                return processReceivedData(exp, participation, slot, type, day);
            case ParticipationSlotStatus.FOLLOW_COMPLETE:
                return processReceivedData(exp, participation, slot, type, day);
            case ParticipationSlotStatus.ERROR:
                return "Error";
        }
    }
}

function processReceivedData(exp, participation, slot, type, day) {
    let id = "participation-" + participation._id + "-" + day + "-" + type;
    let val = slot["value"];
    return val;
}

function initiateSelect() {
    setTimeout(function () {
        $('select').material_select();
    }, 0);
}

function getJoinLink(id) {
    let getUrl = window.location;
    let baseUrl = getUrl.protocol + "//" + getUrl.host + "/" + getUrl.pathname.split('/')[1];
    return baseUrl + "/share/join/" + id;
}

function copyToClipboard(element) {
    let $temp = $("<input>");
    $("body").append($temp);
    $temp.val($(element).val()).select();
    document.execCommand("copy");
    $temp.remove();
}
